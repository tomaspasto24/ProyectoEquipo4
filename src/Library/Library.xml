<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Bot.AbstractBot">
            <summary>
            Clase abstracta que debe implementar cualquier clase de bot para ser utilizada en esta aplicacion.
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.StartCommunication">
            <summary>
            Comienza la comunicacion entre el bot y los usuarios.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.SendMessage(System.Int64,System.String)">
            <summary>
            Envia un mensaje al usuario con el bot como emisor.
            </summary>
            <param name="id">Id del usuario destinatario</param>
            <param name="text">Mensaje a enviar</param>
        </member>
        <member name="T:Bot.ConsoleBot">
            <summary>
            Implementacion de AbstractBot que utiliza la consola como interfaz de comunicacion
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa los métodos polimórficos StartCommunication y SendMessage.
            Cumple con el patrón Singleton, esto lo que hace es que, garantiza que haya una única instancia de la clase y de esta forma se obtiene
            un acceso global a esta instancia.
            </summary>
        </member>
        <member name="P:Bot.ConsoleBot.Instance">
            <summary>
            Obtiene la única instancia de esta clase.
            </summary>
            <value>La única instancia de esta clase.</value>
        </member>
        <member name="M:Bot.ConsoleBot.#ctor">
            <summary>
            Constructor por defecto, privado para facilitar la implementación del patron Singleton.
            </summary>
        </member>
        <member name="M:Bot.ConsoleBot.SendMessage(System.Int64,System.String)">
            <summary>
            Envia un mensaje al usuario con el bot como emisor.
            </summary>
            <param name="id">Id del usuario destinatario</param>
            <param name="text">Mensaje a enviar</param>
        </member>
        <member name="M:Bot.ConsoleBot.StartCommunication">
            <summary>
            Comienza la comunicacion entre el bot y los usuarios.
            </summary>
        </member>
        <member name="T:Bot.AbstractHandler">
            <summary>
            Clase abstracta que debe implementar cualquiera de los handlers utilizados en la Chain of Responsability.
            Patrones y principios: 
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método handle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            A su vez, cumple con el patrón Chain of Responsibility.
            </summary>
        </member>
        <member name="M:Bot.AbstractHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="P:Bot.AbstractHandler.Succesor">
            <summary>
            El siguiente handler en caso de que el actual no cumpla la condicion.
            </summary>
            <value>Siguiente handler</value>
        </member>
        <member name="M:Bot.AbstractHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Bot.AbstractHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Bot.AbstractHandler.Handle(Bot.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente handler si está definido o no es nulo.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje.</param>
            <returns>Este handler si fue capaz de procesar el mensaje, en caso contrario el Succesor</returns>
        </member>
        <member name="M:Bot.AbstractHandler.Cancel">
            <summary>
            Retorna este handler al estado inicial y cancela el próximo handler si existe. 
            Utilizado para que los handlers que procesan varios mensajes cambiando de estado 
            entre mensajes puedan volver al estado inicial en caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Bot.AddMaterialHandler">
            <summary>
            Handler que se encarga de agregar un material a una publicación
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.AddMaterialHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.AddMaterialHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.AdminHandler">
            <summary>
            Handler que se encarga de cambiar el rol del usuario a Admin (solo es utilizado en la demostración)
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.AdminHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.AdminHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.CancelHandler">
            <summary>
            Handler que se encarga de cancelar la operación que este realizando un usuario.
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.CancelHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.CancelHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.CommandHandler">
            <summary>
            Handler que se encarga de mostrar la lista de comandos, segun los permisos que tenga el usuario
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.CommandHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.CommandHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.ContactHandler">
            <summary>
            Handler que se encarga de otorgar el contacto de una empresa, a un emprendedor que la solicita
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.ContactHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.ContactHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.DefaultHandler">
            <summary>
            Handler que se encarga de enviar un mensaje de advertencia en caso de que el usuario envie un comando que no existe o que no tiene permiso, o si ingreso algo incorrecto.
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.DefaultHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.DefaultHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.DefaultRoleHandler">
            <summary>
            Handler que se encarga de cambiar el rol del usuario a Default (solo es utilizado en la demostración)
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.DefaultRoleHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.DefaultRoleHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.IHandler">
            <summary>
            Interfaz para ser utilizada en cada uno de los handlers.
            </summary>
        </member>
        <member name="P:Bot.IHandler.Succesor">
            <summary>
            El siguiente handler en caso de que el actual no cumpla la condicion.
            </summary>
            <value>Siguiente handler</value>
        </member>
        <member name="M:Bot.IHandler.Handle(Bot.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente handler si está definido o no es nulo.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje.</param>
            <returns>Este handler si fue capaz de procesar el mensaje, en caso contrario el Succesor</returns>
        </member>
        <member name="M:Bot.IHandler.Cancel">
            <summary>
            Retorna este handler al estado inicial y cancela el próximo handler si existe. 
            Utilizado para que los handlers que procesan varios mensajes cambiando de estado 
            entre mensajes puedan volver al estado inicial en caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Bot.ModifyEntrepreneurInformationHandler">
            <summary>
            Handler que se encarga de comenzar el proceso de modificación de información de un emprendedor
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.ModifyEntrepreneurInformationHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.ModifyEntrepreneurInformationHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.ModifyUserCertificationsHandler">
            <summary>
            Handler que se encarga de modificar la lista de certificaciones de un emprendedor
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.ModifyUserCertificationsHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.ModifyUserCertificationsHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.ModifyUserHeaderHandler">
            <summary>
            Handler que se encarga de modificar el campo del rubro de un emprendedor
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.ModifyUserHeaderHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.ModifyUserHeaderHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.ModifyUserSpecializationsHandler">
            <summary>
            Handler que se encarga de modificar la lista de especializaciones de un emprendedor
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.ModifyUserSpecializationsHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.ModifyUserSpecializationsHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.ModifyUserUbicationHandler">
            <summary>
            Handler que se encarga de modificar la ubicación de un emprendedor
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.ModifyUserUbicationHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.ModifyUserUbicationHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.PublishHandler">
            <summary>
            Handler que se encarga de crear una publicación para una empresa
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.PublishHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.PublishHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.PurchasesReportHandler">
            <summary>
            Handler que se encarga de otorgar, a un emprendedor, las compras realizadas anteriormente
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.PurchasesReportHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.PurchasesReportHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.RegisterHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.RegisterHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.RegisterHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.SalesReportHandler">
            <summary>
            Handler que se encarga de otorgar, a un usuario de empresa, las ventas realizadas anteriormente
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.SalesReportHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.SalesReportHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.SearchByLocationHandler">
            <summary>
            Handler que se encarga de realizar una búsqueda de publicaciones con el filtro de localización
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.SearchByLocationHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.SearchByLocationHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.SearchByMaterialHandler">
            <summary>
            Handler que se encarga de realizar una búsqueda de publicaciones con el filtro de material
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.SearchByMaterialHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.SearchByMaterialHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.SearchHandler">
            <summary>
            Handler que se encarga de comenzar el proceso de búsqueda de publicaciones
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.SearchHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.SearchHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.StartHandler">
            <summary>
            Handler que se encarga de saludar al usuario
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.StartHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.StartHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.TextNullHandler">
            <summary>
            Handler que se encarga de enviar una excepción en caso de que ingrese un mensaje nulo
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.TextNullHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.TextNullHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.TokenHandler">
            <summary>
            Handler que se encarga de crear un token para una empresa
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.TokenHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.TokenHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.UndertakeHandler">
            <summary>
            Handler que se encarga de convertir un usuario Default en Entrepreneur
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="F:Bot.UndertakeHandler.entrepreneurData">
            <summary>
            Diccionario que contiene cada usuario intentando emprender con su respectiva información.
            </summary>
            <typeparam name="UserInfo">El usuario que intenta emprender</typeparam>
            <typeparam name="EntrepeneurData">La información del usuario</typeparam>
        </member>
        <member name="M:Bot.UndertakeHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.UndertakeHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.UndertakeHandler.EntrepeneurData">
            <summary>
            Clase interna encargada de alamacenar información de emprendedores.
            </summary>
        </member>
        <member name="P:Bot.UndertakeHandler.EntrepeneurData.Heading">
            <summary>
            Rubro del usuario
            </summary>
        </member>
        <member name="P:Bot.UndertakeHandler.EntrepeneurData.City">
            <summary>
            Ciudad del usuario
            </summary>
        </member>
        <member name="M:Bot.UndertakeHandler.EntrepeneurData.#ctor(System.String)">
            <summary>
            Crea una nueva instancia de este contenedor de información y define el rubro.
            </summary>
            <param name="heading">El rubro del usuario</param>
        </member>
        <member name="T:Bot.UserInformationHandler">
            <summary>
            Handler que se encarga de mostrar los datos de un emprendedor
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP, este motivo de cambio podría ser, cambiar el método InternalHandle.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa el método polimórfico InternalHandle. 
            A su vez, cumple con el patrón Chain of Responsability.
            </summary>
        </member>
        <member name="M:Bot.UserInformationHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Crea una nueva instancia de éste handler y define su sucesor.
            </summary>
            <param name="succesor">El siguiente handler a ser invocado en caso de que el actual no cumpla la condición.</param>
        </member>
        <member name="M:Bot.UserInformationHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Intenta procesar el mensaje recibido y devuelve una respuesta.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="T:Bot.Company">
            <summary>
            Clase que se encarga de representar una Compañía. Cumple con el patrón de diseño Creator porque la clase
            Empresa tiene la responsabilidad de crear instancias de la clase Usuario y Publicación ya que tiene
            un contenedor capaz de almacenar instancias de ambas y las usa de forma muy cercana.
            </summary>
        </member>
        <member name="M:Bot.Company.#ctor">
            <summary>
            Constructor ingresado en blanco para la implementación de la Serialización.
            </summary>
        </member>
        <member name="M:Bot.Company.#ctor(System.String,System.String,Bot.GeoLocation,System.String)">
            <summary>
            Constructor de la clase Empresa, inicializa los valores de los parámetros.
            </summary>
            <param name="name">Nombre de la Empresa.</param>
            <param name="header">Rubro de la Empresa.</param>
            <param name="location">Ubicación establecida de la Empresa.</param>
            <param name="contact">Contacto (Teléfono) de la Empresa.</param>
        </member>
        <member name="P:Bot.Company.Location">
            <summary>
            Obtiene o establece location el cual es público por motivos de incompatibilidad con la implementación de la Serialización.
            </summary>
            <value>GeoLocation.</value>
        </member>
        <member name="P:Bot.Company.Name">
            <summary>
            Obtiene o establece nombre de la clase Empresa.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Company.Item">
            <summary>
            Obtiene o establece nombre del rubro de la clase Empresa.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Company.Contact">
            <summary>
            Obtiene o establece el contacto de la clase Empresa.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Company.ListHistorialPublications">
            <summary>
            Obtiene o establece el historial de publicaciones como una lista de solo lectura para que no se
            pueda agregar o quitar objetos Publication de la instancia obtenida.
            </summary>
            <returns>Lista Publications de solo lectura.</returns>
        </member>
        <member name="P:Bot.Company.ListOwnPublications">
            <summary>
            Obtiene o establece una lista de las publicaciones actuales de la empresa como una lista de solo lectura.
            </summary>
            <returns>Lista Publitacions de solo lectura.</returns>
        </member>
        <member name="P:Bot.Company.ListUsers">
            <summary>
            Obtiene o establece una lista de los usuarios actuales de la Empresa como una lista de solo lectura.
            </summary>
            <returns>Lista User de solo lectura.</returns>
        </member>
        <member name="M:Bot.Company.ReturnContact">
            <summary>
            Devuelve los datos básicos de la empresa (nombre, rubro y contacto).
            </summary>
            <returns>String conteniendo los datos de la Empresa.</returns>
        </member>
        <member name="M:Bot.Company.AddUser(Bot.UserInfo)">
            <summary>
            Método que se encarga de agregar usuario al conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
        </member>
        <member name="M:Bot.Company.AddUser(System.Collections.Generic.IReadOnlyList{Bot.UserInfo})">
            <summary>
            Sobrecarga del método AddUser, se encarga de agregar una lista de Usuarios al conjunto de usuarios de la clase Empresa.
            </summary>
            <param name="listUsers"></param>
        </member>
        <member name="M:Bot.Company.DeleteUser(Bot.UserInfo)">
            <summary>
            Método que se encarga de eliminar un usario del conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
            <returns>Retorna <c>True</c> en caso de que pueda eliminarse, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Company.AddOwnPublication(Bot.Publication)">
            <summary>
            Método que se encarga de agregar una publicación propia de la empresa.
            </summary>
            <param name="publication">Clase Publicación.</param>
        </member>
        <member name="M:Bot.Company.AddOwnPublication(System.Collections.Generic.IReadOnlyList{Bot.Publication})">
            <summary>
            Sobrecarga del método AddOwnPublication, se encarga de agregar una lista de Publicaciones a listOwnPublications.
            </summary>
            <param name="listPublications">Lista de Publicaciones.</param>
        </member>
        <member name="M:Bot.Company.DeleteOwnPublication(Bot.Publication)">
            <summary>
            Método que se encarga de eliminar una publicación propia de la empresa.
            </summary>
            <param name="publication">Publicación.</param>
            <returns>Retorna <c>True</c> en caso de que pueda eliminarse, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Company.AddListHistorialPublication(Bot.Publication)">
            <summary>
            Método que se encarga de añadir una clase Publicación a ListHistorialPublications.
            </summary>
            <param name="publication">Publicación a añadir.</param>
        </member>
        <member name="M:Bot.Company.AddListHistorialPublication(System.Collections.Generic.IReadOnlyList{Bot.Publication})">
            <summary>
            Sobrecarga del método AddListHistorialPublication, se encarga de agregar una lista de Publicaciones a listHistorialPublications.
            </summary>
            <param name="listPublications"></param>
        </member>
        <member name="M:Bot.Company.ContainsPublication(System.String)">
            <summary>
            Verifica si la compañía contiene la publicación ingresada por parametro
            </summary>
            <param name="publicationTitle">Titulo de la publicación en cuestión</param>
            <returns>True si la contiene, false en caso contrario</returns>
        </member>
        <member name="T:Bot.ISetOfElement`1">
            <summary>
            Interfaz pública ISet que representa a las clases que se encargan de administrar objetos (Conjunto).
            </summary>
            <typeparam name="T">Elemento T (Ejemplo: empresa o publicación).</typeparam>
        </member>
        <member name="M:Bot.ISetOfElement`1.AddElement(`0)">
            <summary>
            Método que se encarga de agregar un elemento a la lista de elementos del propio Set en cuestión.
            </summary>
            <param name="element">Elemento.</param>
            <returns><c>True</c> en caso de que se pueda agregar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.ISetOfElement`1.DeleteElement(`0)">
            <summary>
            Método que se encarga de eliminar un elemento a la lista de elementos del propio Set en cuestión.
            </summary>
            <param name="element">Elemento.</param>
            <returns><c>True</c> en caso de que se pueda eliminar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.ISetOfElement`1.ReturnListElements">
            <summary>
            Método que retorna en forma de string la lista de elementos.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:Bot.ISetOfElement`1.ContainsElementInListElements(`0)">
            <summary>
            Método que se encarga de buscar el elemento en la lista de elementos y retornar si se encuentra o no.
            </summary>
            <param name="element"></param>
            <returns><c>True</c> en caso de que se pueda encontrar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.ISetOfElement`1.ContainsElementInListElements(System.String)">
            <summary>
            Sobrecarga del método ContainsElementInListElements, mismo funcionamiento pero con el nombre del elemento.
            </summary>
            <param name="elementName">Nombre del elemento.</param>
            <returns><c>True</c> en caso de que se pueda encontrar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.ISetOfElement`1.Initialize">
            <summary>
            Método que debe ser ejecutado por el constructor de la clase. Esto pide de cierta forma a la clase que implemente
            la interfaz ISetOfElement a que aplique el patrón Singleton. 
            </summary>
        </member>
        <member name="T:Bot.Material">
            <summary>
            Clase Material se encarga de representar cada material, tiene la responsabilidad de conocer su nombre, cantidad, precio y 
            sus palabras clave.
            Cumple con el patrón Expert (GRASP) y SRP (SOLID) porque todas las operaciones que hace, las realiza con
            datos internos que solo la clase Material conoce ya que es experta en lo que hace. En caso de que la clase Material no se hubiera creado, 
            la clase Publication tendría más de una responsabilidad y además imposibilitaría que el usuario pueda publicar más de un material a la vez rompiendo
            con el patron SRP.
            </summary>
        </member>
        <member name="M:Bot.Material.#ctor">
            <summary>
            Constructor sin implementación para ser usado por JsonConstructor.
            </summary>
        </member>
        <member name="M:Bot.Material.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Método de la clase Material que se encarga de asignar valores a los atributos name, quantity y price. Construye el Material. En caso de no tener precio, se asigna 0 a su atributo.
            </summary>
            <param name="name">String nombre.</param>
            <param name="quantity">Entero cantidad.</param>
            <param name="price">Entero precio.</param>
        </member>
        <member name="P:Bot.Material.Name">
            <summary>
            Obtiene o establece nombre del la clase Material.
            </summary>
            <value>String.</value>
        </member>
        <member name="P:Bot.Material.KeyWords">
            <summary>
            Obtiene todas las Palabras Clave que contiene el Material.
            </summary>
            <returns>Cadena de caracteres.</returns>
        </member>
        <member name="P:Bot.Material.Quantity">
            <summary>
            Obtiene o establece cantidad del la clase Material.
            </summary>
            <value>Entero.</value>
        </member>
        <member name="P:Bot.Material.Price">
            <summary>
            Obtiene o establece precio del la clase Material.
            </summary>
            <value>Entero.</value>
        </member>
        <member name="M:Bot.Material.AddKeyWord(System.String)">
            <summary>
            Agrega una palabra clave a la lista de palabras clave.
            </summary>
            <param name="keyWord">Palabra clave.</param>
        </member>
        <member name="M:Bot.Material.DeleteKeyWord(System.String)">
            <summary>
            El método busca si hay un valor del string ingresado como parámetro, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="keyWord">Cadena de caracteres de la palabra clave que se quiera eliminar.</param>
            <returns><c>True</c> en caso de que se pueda eliminar, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:Bot.Publication">
            <summary>
            Cada objeto de la clase Publicación, administrado por un objeto Empresa, es el conjunto de items
            que la aplicación muestra a los emprendedores. Cumple con el patrón de diseño Creator porque la clase
            Publication tiene la responsabilidad de crear instancias de la clase Material porque guarda instancias
            de Material y lo usa de forma cercana.
            </summary>
        </member>
        <member name="M:Bot.Publication.#ctor">
            <summary>
            Constructor ingresado en blanco para la implementación de la Serialización.
            </summary>
        </member>
        <member name="M:Bot.Publication.#ctor(System.String,Bot.Company,Bot.GeoLocation,Bot.Material)">
            <summary>
            Constructor de Publicación, instancia la hora del sistema actual en donde se crea y setea nombreEmpresa, ubicacion, material y titulo de la publicacion.
            </summary>
            <param name="title">Titulo.</param>
            <param name="company">Empresa.</param>
            <param name="location">Ubicación.</param>
            <param name="material">Material.</param>
        </member>
        <member name="P:Bot.Publication.InterestedPerson">
            <summary>
            Obtiene una instancia de RoleEntrepreneur que referencia al emprendedor interesado.
            </summary>
            <value>Rol Emprendedor.</value>
        </member>
        <member name="P:Bot.Publication.Location">
            <summary>
            Obtiene o establece ubicación dada de la clase Publicación.
            </summary>
            <value>Ubicación.</value>
        </member>
        <member name="P:Bot.Publication.Title">
            <summary>
            Obtiene o establece titulo que representa la publicación. Más que nada para poder retornar una lista
            identificando por título.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Publication.Company">
            <summary>
            Obtiene o establece clase Empresa dueña de la clase Publicación. Get público.
            </summary>
            <value>Empresa.</value>
        </member>
        <member name="P:Bot.Publication.Date">
            <summary>
            Obtiene o establece el atributo Date que devuelve la hora en la que se crea la clase Publicacación.
            Es decir, cuando el constructor de la clase se ejecuta.
            </summary>
            <value>DateTime.</value>
        </member>
        <member name="P:Bot.Publication.ClosedDate">
            <summary>
            Obtiene o establece el atributo Date que devuelve la hora en la que se cierra la clase Publicacación.
            Es decir, cuando el método ClosePublication es ejecutado.
            </summary>
            <value>DateTime.</value>
        </member>
        <member name="P:Bot.Publication.ListMaterials">
            <summary>
            Obtiene o establece una lista de solo lectura con todos los materiales.
            </summary>
            <returns>Lista de solo lectura de Material.</returns>
        </member>
        <member name="P:Bot.Publication.ListQualifications">
            <summary>
            Obtiene o establece una lista de solo lectura de los string Habilitaciones.
            </summary>
            <value>Lista de solo lectura de cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Publication.IsClosed">
            <summary>
            Obtiene o establece un valor que indica si el estado de la publicación es abierto o cerrado.
            </summary>
            <value>Booleano.</value>
        </member>
        <member name="M:Bot.Publication.AddMaterial(Bot.Material)">
            <summary>
            Método que agrega a material a la publicación.
            </summary>
            <param name="material">Objeto Material.</param>
        </member>
        <member name="M:Bot.Publication.AddMaterial(System.Collections.Generic.IReadOnlyList{Bot.Material})">
            <summary>
            Sobrecarga de AddMaterial que agrega una lista de materiales a listMaterials.
            </summary>
            <param name="listMaterials"></param>
        </member>
        <member name="M:Bot.Publication.DeleteMaterial(Bot.Material)">
            <summary>
            El método busca si hay un valor igual a la instancia Material ingresada, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="material">Indice del Material que se quiera eliminar.
            Se obtiene con la función DevolverListaMateriales.</param>
            <returns><c>True</c> en caso de que se elimine correctamente, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Publication.ClosePublication">
            <summary>
            Cierra la clase Publicación por completo, asigna <c>True</c> a la variable IsClosed y
            llama al método DeletePublications para eliminarse a si misma de la lista estática de publicaciones
            de la clase conjunto publicaciones, además de esto retorna la persona que estuvo interesada.
            </summary>
            <returns>Usuario que estuvo interesado en adquirir el producto.</returns>
        </member>
        <member name="M:Bot.Publication.AddQualification(System.String)">
            <summary>
            Agrega una habilitación a la lista de Habilitaciones de la clase Material.
            </summary>
            <param name="qualification">String.</param>
        </member>
        <member name="M:Bot.Publication.AddQualification(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Sobrecarga del método AddQualification que agrega una lista de Habilitaciones a listQualifications.
            </summary>
            <param name="listQualifications"></param>
        </member>
        <member name="M:Bot.Publication.DeleteQualification(System.String)">
            <summary>
            Elimina una habilitación de la lista de Habilitaciones de la clase Material.
            </summary>
            <param name="qualification">Índice de la Habilitación.</param>
            <returns><c>True</c> en caso de que se pueda eliminar, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Publication.SetInterestedPerson(Bot.EntrepreneurInfo)">
            <summary>
            Método que setea a la persona interesada (RolEmprendedor) en el atributo InterestedPerson.
            Debe ser llamado por el método ContactCompany de la clase RolEmprendedor.
            </summary>
            <param name="interestedPerson">InterestedPerson.</param>
        </member>
        <member name="M:Bot.Publication.ReturnPublication">
            <summary>
            Método que devuelve una publicación como tipo string.
            </summary>
            <returns>String publication.</returns>
        </member>
        <member name="T:Bot.PublicationSet">
            <summary>
            Conjunto de Publicaciones, clase que se encarga de administrar la lista de Publicaciones en general.
            Cumple con el patrón de creación Singleton (Ver Readme).
            </summary>
        </member>
        <member name="P:Bot.PublicationSet.Instance">
            <summary>
            Obtiene el acceso a la propia instancia de la clase PublicationSet,
            en caso de que el atributo instance no este creado, lo crea y lo retorna. En caso 
            contrario de que anteriormente este creado simplemente lo retorna, asi se asegura de que
            siempre se use la misma instancia y se cumpla con Singleton.
            </summary>
            <returns>Instancia PublicationSet.</returns>
        </member>
        <member name="P:Bot.PublicationSet.ListPublications">
            <summary>
            Obtiene la lista de Publicaciones.
            </summary>
            <value>Lista de solo lectura de clase Publicación.</value>
        </member>
        <member name="M:Bot.PublicationSet.AddElement(Bot.Publication)">
            <summary>
            Método que se encarga de agregar una Publicación a la lista de Publicaciones del sistema.
            </summary>
            <param name="element">Elemento Publicación.</param>
            <returns><c>True</c> en caso de que se pueda agregar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.DeleteElement(Bot.Publication)">
            <summary>
            Método que se encarga de eliminar una Publicación de la lista de Publicaciones del sistema.
            </summary>
            <param name="element">Publicación.</param>
            <returns><c>True</c> en caso de que se haya eliminado correctamente y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.ReturnListElements">
            <summary>
            Método que retorna la lista completa de Publicaciones en un string.
            </summary>
            <returns>String con los nombres de las Publicaciones.</returns>
        </member>
        <member name="M:Bot.PublicationSet.ContainsElementInListElements(Bot.Publication)">
            <summary>
            Método simple que se encarga de comprobar si una clase Publicación se encuentra
            en el sistema de Publicaciones.
            </summary>
            <param name="element">Publicación.</param>
            <returns><c>True</c> en caso de encontrarse en el sistema y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.ContainsElementInListElements(System.String)">
            <summary>
            Sobrecarga de ContainsElementInListElements, se encarga de comprobar si el nombre de una clase Publicación se encuentra
            en la lista de Publicaciones.
            </summary>
            <param name="elementName">Nombre de Publicación.</param>
            <returns><c>True</c> en caso de encontrarse en el sistema y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.Initialize">
            <summary>
            Método que es llamado por el constructor privado para inicializar la lista de clases Publicación.
            </summary>
        </member>
        <member name="T:Bot.Command">
            <summary>
            Clase encargada de guardar todos los comandos existentes en el ChatBot y sus respectivos permisos necesarios para utilizar a cada uno de ellos.
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP. Éste motivo podría ser, cambiar la forma de
            almacenar los comandos.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase, la cuál es el
            almacenamiento de los comandos con sus respectivas descripciones y permisos.
            </summary>
        </member>
        <member name="M:Bot.Command.GetCommands(System.Int64)">
            <summary>
            Obtiene la lista de comandos visibles para un usuario dado
            </summary>
            <param name="userId">Id del usuario en cuestión</param>
            <returns>Lista de comandos que este usuario puede utilizar</returns>
        </member>
        <member name="T:Bot.SessionRelated">
            <summary>
            Clase SessionRelated que se ocupa de administrar la lista de usuarios y sus respectivos id's.
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.AllUsers">
            <summary>
            Lista de todos los usuarios
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.DiccUserTokens">
            <summary>
            Diccionario que contiene el token que se relacion con la compañía
            </summary>
            <typeparam name="string">El token en cuestión</typeparam>
            <typeparam name="Company">La compañía en cuestión</typeparam>
        </member>
        <member name="F:Bot.SessionRelated.DiccEntrepreneurInfo">
            <summary>
            Diccionario que contiene la UserInfo que se relaciona con la EntrepreneurInfo
            </summary>
            <typeparam name="UserInfo">El UserInfo</typeparam>
            <typeparam name="EntrepreneurInfo">La EntrepreneurInfo</typeparam>
        </member>
        <member name="F:Bot.SessionRelated.DiccAdminInfo">
            <summary>
            Diccionario que contiene la UserInfo que se relaciona con la AdminInfo
            </summary>
            <typeparam name="UserInfo">La UserInfo</typeparam>
            <typeparam name="AdminInfo">La AdminInfo</typeparam>
        </member>
        <member name="F:Bot.SessionRelated.DiccUserCompanyInfo">
            <summary>
            Diccionario que contiene la UserInfo que se relaciona con la UserCompanyInfo
            </summary>
            <typeparam name="UserInfo">La UserInfo</typeparam>
            <typeparam name="UserCompanyInfo">La UserCompanyInfo</typeparam>
            <returns></returns>
        </member>
        <member name="P:Bot.SessionRelated.DiccUserTokensToSerialize">
            <summary>
            Obtiene DiccUserTokens como una lista
            </summary>
        </member>
        <member name="P:Bot.SessionRelated.DiccEntrepreneurInfoToSerialize">
            <summary>
            Obtiene DiccEntrepreneurInfo como una lista
            </summary>
        </member>
        <member name="P:Bot.SessionRelated.DiccAdminInfoToSerialize">
            <summary>
            Obtiene DiccAdminInfo como una lista
            </summary>
        </member>
        <member name="P:Bot.SessionRelated.DiccUserCompanyInfoToSerialize">
            <summary>
            Obtiene DiccUserCompanyInfo como una lista
            </summary>
        </member>
        <member name="P:Bot.SessionRelated.Instance">
            <summary>
            Obtiene una única instancia de esta clase
            </summary>
            <value>La única instancia de esta clase.</value>
        </member>
        <member name="M:Bot.SessionRelated.#ctor">
            <summary>
            Constructor de la clase SessionRelated sin implementación y de acceso publico para poder ser usado por 
            la etiqueta JsonConstructor.
            </summary>
        </member>
        <member name="M:Bot.SessionRelated.AddNewUser(Bot.UserInfo)">
            <summary>
            Agrega un nuevo usuario en caso de que no exista
            </summary>
            <param name="user">El usuario en cuestión</param>
        </member>
        <member name="M:Bot.SessionRelated.DeleteUser(Bot.UserInfo)">
            <summary>
            Elimina un usuario
            </summary>
            <param name="user">Usuaurio a borrar</param>
        </member>
        <member name="M:Bot.SessionRelated.UsernameExists(System.Int64)">
            <summary>
            Verifica si existe un usuario
            </summary>
            <param name="id">Id del usuario a verificar</param>
            <returns>True si existe el usuario, false en caso contrario</returns>
        </member>
        <member name="M:Bot.SessionRelated.GetUserById(System.Int64)">
            <summary>
            Obtiene el usuario a partir de un id
            </summary>
            <param name="id">Id del usuario</param>
            <returns>El usuario</returns>
        </member>
        <member name="M:Bot.SessionRelated.GetCompanyByToken(System.String)">
            <summary>
            Metodo para retornar la Company asociada al token generado
            </summary>
            <param name="token">Token que el usuario inserta</param>
            <returns>La compañía relacionada al token o nulo en caso de que no haya una compañía con ese token</returns>
        </member>
        <member name="M:Bot.SessionRelated.GetCompanyByName(System.String)">
            <summary>
            Obtiene la compañía a partir del nombre
            </summary>
            <param name="companyName">El nombre de la compañía</param>
            <returns>Si existe, la compañía. Nulo en caso contrario</returns>
        </member>
        <member name="M:Bot.SessionRelated.GetTokenByCompany(Bot.Company)">
            <summary>
            Obtiene un token a partir de la compañía
            </summary>
            <param name="company">La compañía en cuestión</param>
            <returns>Si existe, el token. Nulo en caso contrario</returns>
        </member>
        <member name="M:Bot.SessionRelated.GetEntrepreneurInfoByUserInfo(Bot.UserInfo)">
            <summary>
            Obtiene una EntrepreneurInfo a partir de un UserInfo
            </summary>
            <param name="user">El UserInfo en cuestión</param>
            <returns>En caso de que exista, la EntrepreneurInfo asociada a la UserInfo. Nulo en caso contrario</returns>
        </member>
        <member name="M:Bot.SessionRelated.GetAdminInfoByUserInfo(Bot.UserInfo)">
            <summary>
            Obtiene una AdminInfo a partir de un UserInfo
            </summary>
            <param name="user">El UserInfo en cuestión</param>
            <returns>En caso de que exista, la AdminInfo asociada a la UserInfo. Nulo en caso contrario</returns>
        </member>
        <member name="M:Bot.SessionRelated.GetUserCompanyByUserInfo(Bot.UserInfo)">
            <summary>
            Obtiene una UserCompanyInfo a partir de un UserInfo
            </summary>
            <param name="user">El UserInfo en cuestión</param>
            <returns>En caso de que exista, la UserCompanyInfo asociada a la UserInfo. Nulo en caso contrario</returns>
        </member>
        <member name="T:Bot.EntrepreneurInfo">
            <summary>
            En esta clase se aplica el patrón Expert porque se necesita que sea experta en toda la información referente al emprendedor y a su lógica, es capáz de modificar
            su información y de llamar a las clases que hace falta para cumplir con sus requerimientos (llamar a las búsquedas, acceder al contacto de empresas).
            </summary>
        </member>
        <member name="M:Bot.EntrepreneurInfo.#ctor(System.String,Bot.GeoLocation)">
            <summary>
            Crea una nueva instancia de la clase EntrepreneurInfo, asignando el rubro y la localización del emprendedor.
            </summary>
            <param name="heading">Rubro del emprendedor.</param>
            <param name="geolocation">Ubicación del emprendedor.</param>
        </member>
        <member name="M:Bot.EntrepreneurInfo.#ctor">
            <summary>
            Constructor sin implementación para la etiqueta JsonConstructor.
            </summary>
        </member>
        <member name="P:Bot.EntrepreneurInfo.ListHistorialPublications">
            <summary>
            Obtiene la lista de publicaciones adquiridas por el emprendedor.
            </summary>
            <returns>Lista de publicaciones adquiridas.</returns>
        </member>
        <member name="P:Bot.EntrepreneurInfo.Location">
            <summary>
            Obtiene del emprendedor.
            </summary>
            <value>Obtiene ubiación.</value>
        </member>
        <member name="P:Bot.EntrepreneurInfo.Heading">
            <summary>
            Establece rubro del emprendedor.
            </summary>
            <value>Obtiene heading.</value>
        </member>
        <member name="P:Bot.EntrepreneurInfo.Certifications">
            <summary>
            Obtiene la lista de certificaciones del emprendedor.
            </summary>
            <returns>Lista de certificaciones.</returns>
        </member>
        <member name="P:Bot.EntrepreneurInfo.Specializations">
            <summary>
            Obtiene la lista de especializaciones del emprendedor.
            </summary>
            <returns>Lista de especializaciones.</returns>
        </member>
        <member name="M:Bot.EntrepreneurInfo.AddCertification(System.String)">
            <summary>
            Agrega una certificación al emprendedor.
            </summary>
            <param name="certification">Certificación en cuestión.</param>
        </member>
        <member name="M:Bot.EntrepreneurInfo.AddSpecialization(System.String)">
            <summary>
            Agrega una especialización al emprendedor.
            </summary>
            <param name="specialization">Especialización en cuestión.</param>
        </member>
        <member name="M:Bot.EntrepreneurInfo.AddHistorialPublication(Bot.Publication)">
            <summary>
            Agrega una publicación al historial de publicaciones adquiridas.
            </summary>
            <param name="publication">Publicación en cuestión.</param>
        </member>
        <member name="M:Bot.EntrepreneurInfo.ContactCompany(Bot.Publication)">
            <summary>
            Método que se encarga de llamar al método SetInterestedPerson para que este lo fije
            como InterestedPerson de la clase Publication que prefiera. El método termina devolviendo
            el contacto de la empresa dueña de la publicación.
            </summary>
            <param name="publication">Publicación de la cual se requiere saber el contacto.</param>
            <returns>Contacto de la empresa de la publicación como un string.</returns>
        </member>
        <member name="M:Bot.EntrepreneurInfo.GetCertifications">
            <summary>
            Obtiene todas las certificaciones que tiene el emprendedor.
            </summary>
            <returns>Las certificaciones.</returns>
        </member>
        <member name="M:Bot.EntrepreneurInfo.GetSpecializations">
            <summary>
            Obtiene todas las especializaciones que tiene el emprendedor.
            </summary>
            <returns>Las especializaciones.</returns>
        </member>
        <member name="M:Bot.EntrepreneurInfo.ContainsSpecialization(System.String)">
            <summary>
            Verifica si el emprendedor tiene o no una especialización.
            </summary>
            <param name="specialization">Especialización a verificar.</param>
            <returns>True si contiene la especialización, false en caso contrario.</returns>
        </member>
        <member name="M:Bot.EntrepreneurInfo.ContainsCertification(System.String)">
            <summary>
            Verifica si el emprendedor tiene o no una certificación.
            </summary>
            <param name="certification">Certificación a verificar.</param>
            <returns>True si contiene la certificación, false en caso contrario.</returns>
        </member>
        <member name="M:Bot.EntrepreneurInfo.DeleteSpecialization(System.String)">
            <summary>
            Elimina una especialización del emprendedor.
            </summary>
            <param name="specialization">Especialización en cuestión.</param>
        </member>
        <member name="M:Bot.EntrepreneurInfo.DeleteCertification(System.String)">
            <summary>
            Elimina una certificación del emprendedor.
            </summary>
            <param name="certification">Certificación en cuestión.</param>
        </member>
        <member name="T:Bot.ISearch`1">
            <summary>
            Al tener esta interfaz se cumple con el principio OCP, implementándola podemos extender el código a nuevas formas de búsqueda
            sin cambiar el código de las que ya tenemos.
            También se cumple con el principio DIP porque se depende de una abstracción en lugar de directamente de una clase.
            </summary>
            <typeparam name="T">Tipo Genérico.</typeparam>
        </member>
        <member name="M:Bot.ISearch`1.Search(System.String)">
            <summary>
            Método que se implementa tanto en las clases SerachByMaterial, SearchByLocation y en cualquier otra que se agregue
            para hacer una búsqueda.
            </summary>
            <param name="wordToSearch">String por el que se buscará.</param>
            <returns>Devuelve una lista con las publicaciónes que cumplan con la búsqueda.</returns>
        </member>
        <member name="T:Bot.SearchByLocation">
            <summary>
            Clase que implementa la búsqueda de una publicación, en este caso la búsqueda por ubicación.
            Patrones y prrincipios:
            Esta clase cumple con en patrón Expert porque es experta en cómo hacer una búsqueda por ubicación. Además,
            cumple con el principio SRP dado que su única razón de cambio es cómo buscar una publicación con la ubicación que se le indica.
            </summary>
        </member>
        <member name="P:Bot.SearchByLocation.Instance">
            <summary>
            Obtiene una única instancia de esta clase.
            </summary>
            <value>La única instancia de esta clase.</value>
        </member>
        <member name="M:Bot.SearchByLocation.Search(System.String)">
            <summary>
            Método que búsca todas las publicaciones que contienen la ubicación pasada por parámetro. Recorre todas las
            publicaciones y se fija si tiene la misma ubicación recibida. Si es igual, se agrega la publicación a la lista que 
            va a devolver y se va a fijar a la siguiente.
            </summary>
            <param name="wordToSearch">Dirección para buscar.</param>
            <returns>Lista de Publicaciones.</returns>
        </member>
        <member name="T:Bot.SearchByMaterial">
            <summary>
            Clase que implementa la búsqueda de una publicación, en este caso la búsqueda por material.
            Patrones y principios:
            Esta clase cumple con en patrón Expert porque es experta en cómo hacer una búsqueda por material. Además, 
            cumple con el principio SRP dado que su única razón de cambio es cómo buscar una publicación 
            que contenga al material que se le indica.
            </summary>
        </member>
        <member name="P:Bot.SearchByMaterial.Instance">
            <summary>
            Obtiene una única instancia de esta clase.
            </summary>
            <value>La única instancia de esta clase.</value>
        </member>
        <member name="M:Bot.SearchByMaterial.Search(System.String)">
            <summary>
            Método que búsca todas las publicaciones que contienen el material pasado por parámetro. Recorre todas las
            publicaciones y se fija si alguno de sus materiales, tiene a la palabra que recibió por parámetro,
            dentro de la lista de palabras claves. Si la encuentra, se agrega la publicación a la lista va a devolver 
            y se va a fijar a la siguiente.
            </summary>
            <param name="wordToSearch"></param>
            <returns>Lista de publicaciones.</returns>
        </member>
        <member name="T:Bot.GeoLocation">
            <summary>
            Clase que depende de la API Location de la UCU.
            </summary>
        </member>
        <member name="M:Bot.GeoLocation.#ctor">
            <summary>
            Constructor sin implementación para la etiqueta JsonConstructor.
            </summary>
        </member>
        <member name="M:Bot.GeoLocation.#ctor(System.String,System.String)">
            <summary>
            Constructor de la clase Geolocation, llama a un método privado asincrono y después se valida la propiedad Found.
            <c>True</c> se asignan los parámetros ingresados a los atributos city, departament y address respectivamente.
            </summary>
            <param name="address">Dirección.</param>
            <param name="city">Ciudad.</param>
        </member>
        <member name="P:Bot.GeoLocation.City">
            <summary>
            Obtiene o establece ciudad ingresada como parámetro no obligatorio para crear instancia Location.
            </summary>
            <value>String que representa ciudad.</value>
        </member>
        <member name="P:Bot.GeoLocation.Address">
            <summary>
            Obtiene o establece dirección (calle, número de puerta, etc. o ruta, kilómetro, etc) ingresado como parámetro obligatorio para instancia Location.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDistance(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la distancia en kilometros entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular distancia.</param>
            <returns>Distancia de tipo double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDuration(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la duración entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular duración.</param>
            <returns>Duración de tipo double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.GetLocation">
            <summary>
            Retorna el propio objeto Location y descarga el mapa con la ubicación correspondiente.
            </summary>
            <returns>Objeto mismo.</returns>
        </member>
        <member name="M:Bot.GeoLocation.IsValid">
            <summary>
            Método que revisa si se puede encontrar la ubicación construida.
            </summary>
            <returns><c>True</c> en caso de que la ubicación sea válida, <c>False</c> en caso de no ser válida.</returns>
        </member>
        <member name="T:Bot.Message">
            <summary>
            Clase encargada de almacenar el mensaje y el id de un usuario.
            Patrones y principios:
            Debido a que se identifica una sola razón de cambio, esta clase cumple con SRP, esta razón podría ser
            cambiar la forma que se almacena el mensaje y el id.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase
            la cual es almacenar un mensaje con su id respectivo.
            </summary>
        </member>
        <member name="M:Bot.Message.#ctor(System.Int64,System.String)">
            <summary>
            Crea una nueva instancia de la clase Message, asignando el mensaje y el id del usuario
            </summary>
            <param name="id">Id del usuario en cuestión</param>
            <param name="message">Mensaje del usuario en cuestión</param>
        </member>
        <member name="P:Bot.Message.UserId">
            <summary>
            Id del usuario
            </summary>
        </member>
        <member name="P:Bot.Message.Text">
            <summary>
            Mensaje del usuario
            </summary>
        </member>
        <member name="T:Bot.CompanyReport">
            <summary>
            clase reporte emprendedor que cumple con el patron SRP, debido a que tiene una responsabilidad unica que es dar el reporte emprendedor. tambien esta clase implementa la interfaz IReport y cumple con el patron ISP.
            </summary>
        </member>
        <member name="F:Bot.CompanyReport.company">
            <summary>
            atributo de la clase.
            </summary>
        </member>
        <member name="M:Bot.CompanyReport.#ctor(Bot.Company)">
            <summary>
            Constructor de la clase CompanyReport.
            </summary>
            <param name="company">El nombre de la compania.</param>
        </member>
        <member name="M:Bot.CompanyReport.GiveReport">
            <summary>
            método de la clase ReporteEmpresa el cual se encarga de generar el reporte y devolverlo.
            </summary>
            <returns>El reporte de la empresa.</returns>
        </member>
        <member name="T:Bot.EntrepreneurReport">
            <summary>
            clase reporte emprendedor que cumple con el patron SRP, debido a que tiene una responsabilidad unica que es dar el reporte emprendedor. esta clase tambien implementa la interfaz IReport y cumple con el patron ISP.
            </summary>
        </member>
        <member name="M:Bot.EntrepreneurReport.#ctor(Bot.EntrepreneurInfo)">
            <summary>
            constructor de la clase emprendedor.
            </summary>
            <param name="entrepreneur">El nombre del emprendedor.</param>
        </member>
        <member name="M:Bot.EntrepreneurReport.GiveReport">
            <summary>
            Metodo para entregar el reporte del emprendedor.
            </summary>
            <returns>El reporte del emprendedor.</returns>
        </member>
        <member name="T:Bot.IReport">
            <summary>
            interfaz con la firma del metodo que devuelve un reporte
            </summary>
        </member>
        <member name="M:Bot.IReport.GiveReport">
            <summary>
            firma del metodo GiveReport
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bot.MyReferenceHandler.Instance">
            <summary>
            Obtiene una única instancia de esta clase
            </summary>
            <value>La única instancia de esta clase.</value>
        </member>
        <member name="T:Bot.SerializeManager">
            <summary>
            Clase serializadora de los objetos que se desean persistir fuera del bot.
            </summary>
        </member>
        <member name="M:Bot.SerializeManager.#ctor">
            <summary>
            Constructor sin implementación y público (a diferencia de las demás clases Singleton) para poder ser usado por
            el atributo JsonConstructor.
            </summary>
        </member>
        <member name="P:Bot.SerializeManager.Instance">
            <summary>
            Obtiene o establece la instancia de la clase SerializeManager para cumplir con el patrón creacional Singleton (Ver Readme).
            </summary>
            <value>Instancia SerializeManager.</value>
        </member>
        <member name="P:Bot.SerializeManager.ListPublicationsToSerialize">
            <summary>
            Obtiene o establece la lista de publicaciones calco a la lista de publicaciones de PublicationSet, para ser Serializada/Deserializada.
            </summary>
            <value>Lista Publicación.</value>
        </member>
        <member name="P:Bot.SerializeManager.SessionRelatedToSerialize">
            <summary>
            Obtiene o establece el diccionario de tokens y empresas, para ser Serializada/Deserializada.
            </summary>
            <value>Diccionario string, Company.</value>
        </member>
        <member name="M:Bot.SerializeManager.SerializeObjects">
            <summary>
            Método que se encarga de traer los objetos que se desean persistir para poder guardarlos en el archivo DataBase.json
            contenida en la carpeta Docs.
            </summary>
        </member>
        <member name="M:Bot.SerializeManager.DeserializeObjects">
            <summary>
            Método que se encarga de leer el archivo DataBase.json y deserializar los objetos que se quieren persistir para setear
            en sus clases respectivas.
            </summary>
        </member>
        <member name="T:Bot.AdminInfo">
            <summary>
            Clase contenedora de la información manejada por el Admin
            Patrones y principios:
            Esta cumple con el patron SRP, ya que la unica razon de cambio que podría tener la clase, sería cambiar la forma
            de almacenar la lista de certificaciones globales.
            Cumple con Expert ya que, es experta en el manejo de la responsabilidad otorgada que es, manejar la lista de certificaiones globales.
            </summary>
        </member>
        <member name="F:Bot.AdminInfo.globalQualificationList">
            <summary>
            Lista de certifaciones para los usuarios y las publicaciones.
            </summary>
        </member>
        <member name="M:Bot.AdminInfo.#ctor">
            <summary>
            Constructor de la clase AdminInfo sin implementación y de acceso publico para poder ser usado por 
            la etiqueta JsonConstructor.
            </summary>
        </member>
        <member name="T:Bot.Permission">
            <summary>
            Indica los diferentes permisos que requiere un comando y a su vez, los permisos que pueden tener los diferentes usuarios.
            </summary>
        </member>
        <member name="F:Bot.Permission.None">
            <summary>
            Permiso que requieren los comandos destinados a que todos los usuarios puedan acceder a ellos.
            </summary>
        </member>
        <member name="F:Bot.Permission.Register">
            <summary>
            Permiso que requiere el comando para registrarse como usuario de empresa.
            </summary>
        </member>
        <member name="F:Bot.Permission.Search">
            <summary>
            Permiso que requiere el comando para realizar una búsqueda como emprendedor.
            </summary>
        </member>
        <member name="F:Bot.Permission.PurchasesReport">
            <summary>
            Permiso que requiere el comando para obtener un reporte, como emprendedor, de las compras realizadas anteriormente.
            </summary>
        </member>
        <member name="F:Bot.Permission.SalesReport">
            <summary>
            Permiso que requiere el comando para obtener un reporte, como usuario de empresa, de las ventas realizadas anteriormente.
            </summary>
        </member>
        <member name="F:Bot.Permission.ContactCompany">
            <summary>
            Permiso que requiere el comando para obtener el contacto de una empresa como emprendedor.
            </summary>
        </member>
        <member name="F:Bot.Permission.Data">
            <summary>
            Permiso que requiere el comando para mostrar y modificar tus datos como emprendedor.
            </summary>
        </member>
        <member name="F:Bot.Permission.Publish">
            <summary>
            Permiso que requiere el comando para realizar una nueva publicación como usuario de empresa.
            </summary>
        </member>
        <member name="F:Bot.Permission.GenerateToken">
            <summary>
            Permiso que requiere el comando para generar un nuevo token para una nueva empresa como admin.
            </summary>
        </member>
        <member name="F:Bot.Permission.Undertake">
            <summary>
            Permiso que requiere el comando para convertirse en emprendedor siendo un usuario default o nuevo.
            </summary>
        </member>
        <member name="F:Bot.Permission.AddMaterial">
            <summary>
            Permiso que requiere el comando para agregar materiales a una publicación.
            </summary>
        </member>
        <member name="T:Bot.State">
            <summary>
            Indica los diferentes estados que puede tener un usuario
            </summary>
        </member>
        <member name="F:Bot.State.Start">
            <summary>
             Estado por defecto de un usuario
            </summary>
        </member>
        <member name="F:Bot.State.ConfirmingToken">
            <summary>
             Estado en el que se encuentra un usuario al enviar un token para confirmar
            </summary>
        </member>
        <member name="F:Bot.State.ConfirmingHeadingEntrepreneur">
            <summary>
             Estado en el que se encuentra un usuario al enviar un rubro para confirmar
            </summary>
        </member>
        <member name="F:Bot.State.ConfirmingCityEntrepreneur">
            <summary>
             Estado en el que se encuentra un usuario al enviar una ciudad para confirmar
            </summary>
        </member>
        <member name="F:Bot.State.ConfirmingAdressEntrepreneur">
            <summary>
             Estado en el que se encuentra un usuario al enviar una dirección para confirmar
            </summary>
        </member>
        <member name="F:Bot.State.ConfirmingCompanyName">
            <summary>
             Estado en el que se encuentra un usuario al enviar un nombre de una empresa para confirmar
            </summary>
        </member>
        <member name="F:Bot.State.ConfirmingCompanyHeader">
            <summary>
             Estado en el que se encuentra un usuario al enviar un rubro de una empresa para confirmar
            </summary>
        </member>
        <member name="F:Bot.State.ConfirmingCompanyAddress">
            <summary>
             Estado en el que se encuentra un usuario al enviar una dirección de una empresa para confirmar
            </summary>
        </member>
        <member name="F:Bot.State.ConfirmingCompanyCity">
            <summary>
             Estado en el que se encuentra un usuario al enviar una ciudad de una empresa para confirmar
            </summary>
        </member>
        <member name="F:Bot.State.ConfirmingCompanyContact">
            <summary>
             Estado en el que se encuentra un usuario al enviar el contacto de una empresa para confirmar
            </summary>
        </member>
        <member name="F:Bot.State.AskingCompanyName">
            <summary>
             Estado en el que se encuentra un usuario al enviar un nombre de una empresa para continuar con un proceso
            </summary>
        </member>
        <member name="F:Bot.State.AskingDataNumber">
            <summary>
             Estado en el que se encuentra un usuario mientras edita la información de él mismo
            </summary>
        </member>
        <member name="F:Bot.State.ChangingUserUbication">
            <summary>
             Estado en el que se encuentra un usuario al estar cambiando su ubicación
            </summary>
        </member>
        <member name="F:Bot.State.ChangingUserHeader">
            <summary>
             Estado en el que se encuentra un usuario al estar cambiando su rubro
            </summary>
        </member>
        <member name="F:Bot.State.ChangingUserSpecializations">
            <summary>
             Estado en el que se encuentra un usuario al estar modificando su lista de especializaciones
            </summary>
        </member>
        <member name="F:Bot.State.ChangingUserCertifications">
            <summary>
             Estado en el que se encuentra un usuario al estar modificando su lista de certificaciones
            </summary>
        </member>
        <member name="F:Bot.State.ChangingUserAddress">
            <summary>
             Estado en el que se encuentra un usuario al estar cambiando su dirección
            </summary>
        </member>
        <member name="F:Bot.State.ChangingUserCity">
            <summary>
             Estado en el que se encuentra un usuario al estar cambiando su ciudad
            </summary>
        </member>
        <member name="F:Bot.State.AddingUserSpecializations">
            <summary>
             Estado en el que se encuentra un usuario al estar agregando especializaciones
            </summary>
        </member>
        <member name="F:Bot.State.DeletingUserSpecializations">
            <summary>
             Estado en el que se encuentra un usuario al estar eliminando especializaciones
            </summary>
        </member>
        <member name="F:Bot.State.AddingUserCertification">
            <summary>
             Estado en el que se encuentra un usuario al estar agregando certificaciones
            </summary>
        </member>
        <member name="F:Bot.State.DeletingUserCertification">
            <summary>
             Estado en el que se encuentra un usuario al estar eliminando certificaciones
            </summary>
        </member>
        <member name="F:Bot.State.Searching">
            <summary>
             Estado en el que se encuentra un usuario al estar realizando una búsqueda de materiales
            </summary>
        </member>
        <member name="F:Bot.State.SearchingByMaterial">
            <summary>
             Estado en el que se encuentra un usuario al estar realizando una búsqueda con el filtro de materiales
            </summary>
        </member>
        <member name="F:Bot.State.SearchingByLocation">
            <summary>
             Estado en el que se encuentra un usuario al estar realizando una búsqueda con el filtro de localización
            </summary>
        </member>
        <member name="F:Bot.State.InterestedInPublication">
            <summary>
             Estado en el que se encuentra un usuario al estar confirmando si está o no interesado en una publicación
            </summary>
        </member>
        <member name="F:Bot.State.AskingPublicationName">
            <summary>
             Estado en el que se encuentra un usuario al enviar un nombre para la publicación que está creando
            </summary>
        </member>
        <member name="F:Bot.State.AskingCompanyLocation">
            <summary>
             Estado en el que se encuentra un usuario al enviar una localización para la publicación que está creando
            </summary>
        </member>
        <member name="F:Bot.State.AskingMaterialName">
            <summary>
             Estado en el que se encuentra un usuario al enviar un nombre para el material de la publicación que está creando
            </summary>
        </member>
        <member name="F:Bot.State.AskingMaterialQuantity">
            <summary>
             Estado en el que se encuentra un usuario al enviar una cantidad para el material de la publicación que está creando
            </summary>
        </member>
        <member name="F:Bot.State.AskingMaterialPrice">
            <summary>
             Estado en el que se encuentra un usuario al enviar un precio para el material de la publicación que está creando
            </summary>
        </member>
        <member name="F:Bot.State.AskingMaterialNameToAdd">
            <summary>
             Estado en el que se encuentra un usuario al enviar el nombre de un material para agregar a una publicación
            </summary>
        </member>
        <member name="F:Bot.State.AskingMaterialQuantityToAdd">
            <summary>
             Estado en el que se encuentra un usuario al enviar la cantidad de un material para agregar a una publicación
            </summary>
        </member>
        <member name="F:Bot.State.AskingMaterialPriceToAdd">
            <summary>
             Estado en el que se encuentra un usuario al enviar el precio de un material para agregar a una publicación
            </summary>
        </member>
        <member name="F:Bot.State.AddingMaterial">
            <summary>
             Estado en el que se encuentra un usuario al enviar el nombre de la publicación a la que se le quiere agregar un material
            </summary>
        </member>
        <member name="T:Bot.TokenGenerator">
            <summary>
            Clase encargada de generar los tokens para las distintas compañías
            Patrones y principios:
            Cumple con SRP, ya que se identifica una única razón de cambio. Ésta podría ser, cambiar la forma de generar los tokens.
            Cumple con Expert, porque posee todo lo necesario para cumplir con la responsabilidad otorgada a la clase, 
            la cuál es la generación de tokens.
            Cumple con el patrón Singleton, esto lo que hace es que, garantiza que haya una única instancia de la clase y de esta forma se obtiene
            un acceso global a esta instancia.
            /// </summary>
        </member>
        <member name="P:Bot.TokenGenerator.Instance">
            <summary>
            Obtiene una única instancia de esta clase
            </summary>
            <value>La única instancia de esta clase.</value>
        </member>
        <member name="M:Bot.TokenGenerator.GenerateToken">
            <summary>
            Genera un nuevo token para una compañía.
            </summary>
            <returns>El token generado.</returns>
        </member>
        <member name="T:Bot.UserCompanyInfo">
            <summary>
            Clase contenedora de la información de un usuario de una compañía
            Patrones y principios:
            Esta cumple con el patron SRP, ya que la unica razon de cambio que podría tener la clase, sería cambiar la forma
            de guardar la información del usuario de la compañía.
            Cumple con Expert ya que, es experta en el manejo de la información de un usuario de una compañía.
            </summary>
        </member>
        <member name="P:Bot.UserCompanyInfo.company">
            <summary>
            Compañía a la cuál pertenece el usuario
            </summary>
        </member>
        <member name="M:Bot.UserCompanyInfo.#ctor">
            <summary>
            Constructor UserCompanyInfo sin implementación para poder ser utilizado por la etiqueta JsonConstructor.
            </summary>
        </member>
        <member name="M:Bot.UserCompanyInfo.#ctor(Bot.Company)">
            <summary>
            Crea una nueva instancia de la clase UserCompanyInfo, asignando la compañía a la cual pertenece el usuario
            </summary>
            <param name="company">Compañía en cuestión</param>
        </member>
        <member name="T:Bot.UserInfo">
            <summary>
            Clase contenedora de la información del usuario.
            Patrones y principios:
            Esta cumple con el patron SRP, ya que la unica razon de cambio que podría tener la clase, sería cambiar la forma
            de guardar la información del usuario.
            Cumple con Expert ya que, es experta en el manejo de la información de un usuario.
            </summary>
        </member>
        <member name="F:Bot.UserInfo.AdminPermissions">
            <summary>
            Lista de permisos que tiene un administrador
            </summary>
            <typeparam name="Permission">Permisos</typeparam>
        </member>
        <member name="F:Bot.UserInfo.DefaultPermissions">
            <summary>
            Lista de permisos que tiene un usuario default
            </summary>
            <typeparam name="Permission">Permisos</typeparam>
        </member>
        <member name="F:Bot.UserInfo.UserCompanyPermissions">
            <summary>
            Lista de permisos que tiene un usuario de empresa
            </summary>
            <typeparam name="Permission">Permisos</typeparam>
        </member>
        <member name="F:Bot.UserInfo.EntrepreneurPermissions">
            <summary>
            Lista de permisos que tiene un emprendedor
            </summary>
            <typeparam name="Permission">Permisos</typeparam>
        </member>
        <member name="P:Bot.UserInfo.Permissions">
            <summary>
            Lista que contiene los permisos que tiene el usuario
            </summary>
            <typeparam name="Permission">Permisos</typeparam>
        </member>
        <member name="P:Bot.UserInfo.Name">
            <summary>
            Nombre del usuario
            </summary>
            <value></value>
        </member>
        <member name="P:Bot.UserInfo.Id">
            <summary>
            Id del usuario
            </summary>
        </member>
        <member name="P:Bot.UserInfo.HandlerState">
            <summary>
            Estado del usuario que cambia según los comandos que utilice
            </summary>
        </member>
        <member name="M:Bot.UserInfo.#ctor">
            <summary>
            Constructor UserInfo sin implementación para poder ser utilizado por la etiqueta JsonConstructor.
            </summary>
        </member>
        <member name="M:Bot.UserInfo.#ctor(System.String,System.Int64)">
            <summary>
            Crea una nueva instancia de la clase UserInfo, asignando su nombre y el id.
            </summary>
            <param name="name">Nombre del usuario en cuestión</param>
            <param name="id">Id del usuario en cuestión</param>
        </member>
        <member name="M:Bot.UserInfo.HasPermission(Bot.Permission)">
            <summary>
            Verifica si un usuario tiene o no cierto permiso
            </summary>
            <param name="permission">El permiso en cuestión</param>
            <returns>true si tiene el permiso, falso en caso contrario</returns>
        </member>
        <member name="T:Library.TelegramBot">
            <summary>
            Implementacion de AbstractBot que utiliza Telegram como interfaz de comunicacion
            Patrones y principios:
            Debido a que se indentifica una sola razón de cambio, esta clase cumple con SRP.
            También cumple con Expert, ya que posee todo lo necesario para cumplir la responsabilidad otorgada a la clase.
            Cumple con Polymorphism porque usa los métodos polimórficos StartCommunication y SendMessage.
            Cumple con el patrón Singleton, esto lo que hace es que, garantiza que haya una única instancia de la clase y de esta forma se obtiene
            un acceso global a esta instancia.
            </summary>
        </member>
        <member name="M:Library.TelegramBot.#ctor">
            <summary>
            Constructor por defecto, privado para facilitar la implementación del patron Singleton.
            Crea una nueva instancia de esta clase, creando una nueva instancia dentro de la API de telegram.
            </summary>
        </member>
        <member name="P:Library.TelegramBot.Instance">
            <summary>
            Obtiene la única instancia de esta clase.
            </summary>
            <value>La única instancia de esta clase.</value>
        </member>
        <member name="M:Library.TelegramBot.StartCommunication">
            <summary>
            Comienza la comunicacion entre el bot y los usuarios.
            </summary>
        </member>
        <member name="M:Library.TelegramBot.SendMessage(System.Int64,System.String)">
            <summary>
            Envia un mensaje al usuario con el bot como emisor.
            </summary>
            <param name="id">Id del usuario destinatario</param>
            <param name="text">Mensaje a enviar</param>
        </member>
    </members>
</doc>
