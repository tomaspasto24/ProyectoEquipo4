<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Bot.AbstractBot">
            <summary>
            Bot abstracto del cual heredarán los bots concretos.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.#ctor">
            <summary>
            Constructor de la clase AbstractBot
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.StartCommunication">
            <summary>
            Metodo publico y abstracto para comenzar la comunicacion entre el usuario y el canal y el bot o la consola.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.ChangeChannel(System.Int32,Bot.AbstractBot)">
            <summary>
            Metodo publico y abstracto para setear el canal de comunicacion entre el usuario y el bot.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.SendMessage(System.Int32,System.String)">
            <summary>
            Metodo para enviar el mensaje por el canal donde se esta comunicando
            </summary>
            <param name="id">id del usuario con el que dialoga el bot</param>
            <param name="text">mensaje que se quiere enviar al usuario</param>
        </member>
        <member name="T:Bot.ConsoleBot">
            <summary>
            Bot concreto de consola que hereda de AbstractBot
            </summary>
        </member>
        <member name="P:Bot.ConsoleBot.Instance">
            <summary>
            Metodo getter para instanciar instance en caso de que sea null para tener una unica instancia de la clase y que sea de acceso global.
            </summary>
            <value>La instancia inicializada</value>
        </member>
        <member name="M:Bot.ConsoleBot.#ctor">
            <summary>
            Constructor de ConsoleBot que utiliza el constructor de AbstractBot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.ConsoleBot.SendMessage(System.Int32,System.String)">
            <summary>
            Manda un mensaje, en este caso, por consola.
            </summary>
            <param name="id">Id del usuario con el que dialoga el bot</param>
            <param name="text">Mensaje que se quiere enviar al usuario</param>
        </member>
        <member name="M:Bot.ConsoleBot.StartCommunication">
            <summary>
            Metodo StartCommunication, publico que hace override del metodo declarado en AbstractBot
            Es el metodo que da comienzo a la conversacion entre el usuario y el bot concreto o consola.
            </summary>
        </member>
        <member name="T:Bot.AbstractHandler">
            <summary>
            Clase abstracta para los distintos bots.
            </summary>
        </member>
        <member name="M:Bot.AbstractHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase AbstractHandlers
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="P:Bot.AbstractHandler.Succesor">
            <summary>
            Handler sucesor
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.AbstractHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Bot.AbstractHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Bot.AbstractHandler.Handle(Bot.Message,System.String@)">
            <summary>
            Metodo para manejar las peticiones. Si se cumple la condicion, se ejecuta el handler asociado. Sino lo delega a su sucesor.
            </summary>
            <param name="request">Mensaje del usuario</param>
            <param name="response">Respuesta del bot</param>
            <returns></returns>
        </member>
        <member name="M:Bot.AbstractHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Bot.CommandHandler">
            <summary>
            Handler para mostrar los comandos que el usuario tiene acceso
            </summary>
        </member>
        <member name="M:Bot.CommandHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase CommandHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.CommandHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.IHandler">
            <summary>
            Interfaz para los handlers de Chain of Responsability
            </summary>
        </member>
        <member name="P:Bot.IHandler.Succesor">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Bot.IHandler.Handle(Bot.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Bot.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Bot.RegisterHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="T:Bot.RegisterHandler.RegisterState">
            <summary>
            Indica los diferentes estados que puede tener el comando RegisterHandler.
            - Start: El estado inicial del comando. En este estado el comando pide el token de registro
            - ConfirmingToken: Luego de pedir el token. En este estado el comando valida si el token ingresado existe y vuelve al estado Start.
            </summary>
        </member>
        <member name="F:Bot.RegisterHandler.RegisterState.Start">
            Estado antes de mandar el token
        </member>
        <member name="F:Bot.RegisterHandler.RegisterState.ConfirmingToken">
            Estado mientras el bot espera y confirma un token
        </member>
        <member name="P:Bot.RegisterHandler.Data">
            <summary>
            Los datos que va obteniendo el comando en los diferentes estados.
            </summary>
        </member>
        <member name="P:Bot.RegisterHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:Bot.RegisterHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.RegisterHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.RegisterHandler.RegisterData">
            <summary>
            Clase para almacenar la data relacionada al registro
            </summary>
        </member>
        <member name="P:Bot.RegisterHandler.RegisterData.Token">
            <summary>
            El token que se ingresa en el estado ConfirmingToken
            </summary>
        </member>
        <member name="T:Bot.StartHandler">
            <summary>
            Handler para saludar al usuario
            </summary>
        </member>
        <member name="M:Bot.StartHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase StartHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.StartHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.Company">
            <summary>
            Clase que se encarga de representar una Empresa.
            </summary>
        </member>
        <member name="P:Bot.Company.Name">
            <summary>
            Obtiene nombre de la clase Empresa.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Company.ListHistorialPublications">
            <summary>
            Obtiene objeto ListHistorialPublications de la clase Empresa.
            </summary>
            <returns>Lista Publicación.</returns>
        </member>
        <member name="M:Bot.Company.#ctor(System.String,System.String,Bot.GeoLocation,System.String)">
            <summary>
            Constructor de la clase Empresa, setea los valores de los parámetros y suma un valor al
            contador de empresas estático.
            </summary>
            <param name="name">Nombre de la Empresa.</param>
            <param name="item">Rubro de la Empresa.</param>
            <param name="location">Ubicación establecida de la Empresa.</param>
            <param name="contact">Contacto (Teléfono) de la Empresa.</param>
        </member>
        <member name="M:Bot.Company.ReturnContact">
            <summary>
            Devuelve los datos básicos de la empresa (nombre, rubro y contacto).
            </summary>
            <returns>String conteniendo los datos de la Empresa.</returns>
        </member>
        <member name="M:Bot.Company.RegisterCompany">
            <summary>
            Método que registra (agrega) una Empresa a la lista estática de Empresas.
            </summary>
        </member>
        <member name="M:Bot.Company.DeleteCompany">
            <summary>
            Método que elimina la Empresa de la lista estática de Empresas.
            </summary>
        </member>
        <member name="M:Bot.Company.AddUser(Bot.User)">
            <summary>
            Método que se encarga de agregar usuario al conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
        </member>
        <member name="M:Bot.Company.DeleteUser(Bot.User)">
            <summary>
            Método que se encarga de eliminar un usario del conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
            <returns>Retorna <c>True</c> en caso de que pueda eliminarse, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Company.AddOwnPublication(Bot.Publication)">
            <summary>
            Método que se encarga de agregar una publicación propia de la empresa.
            </summary>
            <param name="publication">Publicación.</param>
        </member>
        <member name="P:Bot.Company.ListOwnPublications">
            <summary>
            Método que se encarga de retornar la lista de publicaciones propia de la clase Empresa.
            </summary>
            <returns>Lista Publicación.</returns>
        </member>
        <member name="M:Bot.Company.AddListHistorialPublications(Bot.Publication)">
            <summary>
            Método que se encarga de añadir una clase Publicación a ListHistorialPublications.
            </summary>
            <param name="publication">Publicación a añadir.</param>
        </member>
        <member name="T:Bot.Material">
            <summary>
            Clase Material que cumple con el patrón Expert ya que todos los calculos que hace, los realiza con
            datos internos que solo la clase Material conoce.
            </summary>
        </member>
        <member name="P:Bot.Material.Name">
            <summary>
            Obtiene nombre del la clase Material.
            </summary>
            <value>String.</value>
        </member>
        <member name="P:Bot.Material.KeyWords">
            <summary>
            Obitene todas las Palabras Clave que contiene el Material.
            </summary>
            <returns>Cadena de caracteres.</returns>
        </member>
        <member name="P:Bot.Material.Quantity">
            <summary>
            Obtiene cantidad del la clase Material.
            </summary>
            <value>Entero.</value>
        </member>
        <member name="P:Bot.Material.Price">
            <summary>
            Obtiene precio del la clase Material.
            </summary>
            <value>Entero.</value>
        </member>
        <member name="M:Bot.Material.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor de la clase Material que se encarga de asignar valores a los atributos name, quantity y price. Construye el Material. En caso de no tener precio, se asigna 0 a su atributo.
            </summary>
            <param name="name">String nombre.</param>
            <param name="quantity">Entero cantidad.</param>
            <param name="price">Entero precio.</param>
        </member>
        <member name="M:Bot.Material.AddKeyWord(System.String)">
            <summary>
            Agrega una palabra clave a la lista de palabras clave.
            </summary>
            <param name="keyWord"></param>
        </member>
        <member name="M:Bot.Material.DeleteKeyWord(System.String)">
            <summary>
            El método busca si hay un valor del string ingresado como parámetro, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="palabraClave">Cadena de caracteres de la palabra clave que se quiera eliminar.</param>
            <returns><c>True</c> en caso de que se pueda eliminar, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:Bot.Publication">
            <summary>
            Cada objeto de la clase Publicación, administrado por un objeto Empresa, es el conjunto de items
            que la aplicación muestra a los emprendedores.
            </summary>
        </member>
        <member name="P:Bot.Publication.interestedPerson">
            <summary>
            Atributo público de la clase Publicación con set privado, quedando el get público.
            Este atributo se setea cuando una clase Emprendedor ejecuta el método AskContactToPublication
            sobre una publicación lo que acciona el método interno SetInterestedPerson seteando a la persona
            interesada.
            </summary>
            <value>RoleEntrepreneur.</value>
        </member>
        <member name="P:Bot.Publication.Title">
            <summary>
            Titulo que representa la publicación. Más que nada para poder retornar una lista
            identificando por título.
            </summary>
            <value>string</value>
        </member>
        <member name="P:Bot.Publication.Company">
            <summary>
            Empresa dueña de la clase Publicación. Get público.
            </summary>
            <value>Empresa</value>
        </member>
        <member name="P:Bot.Publication.Location">
            <summary>
            Get público que retorna la ubicación de la publicación.
            </summary>
            <value>GeoLocation</value>
        </member>
        <member name="P:Bot.Publication.Date">
            <summary>
            Get público del atributo Date que devuelve la hora en la que se crea la clase Publicacación.
            Es decir, cuando el constructor de la clase se ejecuta.
            </summary>
            <value>DateTime</value>
        </member>
        <member name="P:Bot.Publication.ClosedDate">
            <summary>
            Get público del atributo Date que devuelve la hora en la que se cierra la clase Publicacación.
            Es decir, cuando el método ClosePublication es ejecutado.
            </summary>
            <value></value>
        </member>
        <member name="P:Bot.Publication.IsClosed">
            <summary>
            Get público del atributo booleano IsClosed que representa el estado Abierto/Cerrado
            de una Publicación.
            </summary>
            <value>Bool</value>
        </member>
        <member name="M:Bot.Publication.#ctor(System.String,Bot.Company,Bot.GeoLocation,Bot.Material)">
            <summary>
            Constructor de Publicación, instancia la hora del sistema actual en donde se crea y setea nombreEmpresa, ubicacion, material y titulo de la publicacion.
            </summary>
            <param name="title"></param>
            <param name="Company"></param>
            <param name="location"></param>
            <param name="material"></param>
        </member>
        <member name="M:Bot.Publication.AddMaterial(Bot.Material)">
            <summary>
            Método que agrega a material a la publicación.
            </summary>
            <param name="material">Objeto Material</param>
        </member>
        <member name="M:Bot.Publication.DeleteMaterial(System.Int32)">
            <summary>
            El método busca si hay un valor en el indice ingresado como parámetro, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="indiceMaterial">Indice del Material que se quiera eliminar.
            Se obtiene con la función DevolverListaMateriales.</param>
            <returns></returns>
        </member>
        <member name="M:Bot.Publication.ReturnListMaterials">
            <summary>
            Devuelve un string con todos los materiales enumerados, necesario para poder eliminar un objeto Material.
            </summary>
            <returns>String con todo los materiales enumerados</returns>
        </member>
        <member name="M:Bot.Publication.ClosePublication">
            <summary>
            Cierra la clase Publicación por completo, asigna <c>True</c> a la variable IsClosed y
            llama al método DeletePublications para eliminarse a si misma de la lista estática de publicaciones
            de la clase conjunto publicaciones, además de esto retorna la persona que estuvo interesada.
            </summary>
            <returns>Usuario que estuvo interesado en adquirir el producto.</returns>
        </member>
        <member name="M:Bot.Publication.AddRating(System.String)">
            <summary>
            Agrega una habilitación a la lista de Habilitaciones de la clase Material.
            </summary>
            <param name="habilitacion">String</param>
        </member>
        <member name="M:Bot.Publication.DeleteRating(System.Int32)">
            <summary>
            Elimina una habilitación de la lista de Habilitaciones de la clase Material.
            </summary>
            <param name="indiceHabilitacion">Índice de la Habilitación</param>
            <returns><c>True</c> en caso de que se pueda eliminar, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Publication.ReturnListRatings">
            <summary>
            Retorna la lista de Habilitaciones que tiene el material.s
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:Bot.Publication.SetInterestedPerson(Bot.RoleEntrepreneur)">
            <summary>
            Método que setea a la persona interesada (RolEmprendedor) en el atributo InterestedPerson. 
            Debe ser llamado por el método ContactCompany de la clase RolEmprendedor.
            </summary>
            <param name="interestedPerson">InterestedPerson</param>
        </member>
        <member name="T:Bot.PublicationSet">
            <summary>
            Conjunto de Publicaciones, clase estática que administra la lista de publicaciones en general.
            </summary>
        </member>
        <member name="P:Bot.PublicationSet.ListPublications">
            <summary>
            Get público que retorna la lista de publicaciones, esto para que la clase Búsqueda pueda 
            manipular eficientemente las Publicaciones.
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.PublicationSet.AddPublication(System.String,Bot.Company,Bot.GeoLocation,Bot.Material)">
            <summary>
            Método que agrega una publicación a la lista publicaciones, toma como parámetro 
            todos los datos para poder crear una instancia de Publicación dentro del método,
            cumpliendo así con el Creator Pattern.
            </summary>
            <param name="title">String Título.</param>
            <param name="company">Clase Empresa.</param>
            <param name="location">Clase Ubicación.</param>
            <param name="material">Clase Material que es tomado como el primero de la Publicación.</param>
        </member>
        <member name="M:Bot.PublicationSet.DeletePublication(System.Int32)">
            <summary>
            Elimina una Publicación de la lista publicaciones, para poder usar el método es necesario 
            haber visto el método ReturnListPublications para poder saber su índice. Retorna 
            <c>True</c> en caso de que se haya eliminado con éxito, en caso contrario <c>Fasle</c>.
            </summary>
            <param name="indicePublicacion">Entero que indica la posición de la Publicación.</param>
            <returns><c>True</c> en caso de que se haya eliminado correctamente y <c>False</c> en caso 
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.DeletePublication(Bot.Publication)">
            <summary>
            Elimina una Publicación de la lista publicaciones.
            </summary>
            <param name="publication">Publicación.</param>
            <returns><c>True</c> en caso de que se haya eliminado correctamente y <c>False</c> en caso 
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.ReturnListPublications">
            <summary>
            Método que retorna la lista completa de Publicaciones en un string con sus respectivos
            índices.
            </summary>
            <returns>String con el nombre de la Publicación y sus indices.</returns>
        </member>
        <member name="T:Bot.Command">
            <summary>
            Clase Command que se ocupa de guardar las listas de comandos segun el rol del usuario
            </summary>
        </member>
        <member name="P:Bot.Command.CommandsList">
            <summary>
            Lista de comandos
            </summary>
        </member>
        <member name="M:Bot.Command.#ctor">
            <summary>
            Constructor de la clase Command. Asigna a la lista de comandos, todos los comandos disponibles.
            </summary>
        </member>
        <member name="M:Bot.Command.EntrepreneurList">
            <summary>
            Metodo que retorna una lista de comandos para el emprendedor
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.CompanyUserList">
            <summary>
            Metodo que retorna una lista de comandos para el usuario empresa
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.AdminList">
            <summary>
            Metodo que retorna una lista de comnados para el admin
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.ReturnCommands(System.Int32)">
            <summary>
            Metodo para retornar la lista de comandos segun que usuario la pida.
            </summary>
            <param name="userId">Id del usuario que pide la lista de comandos</param>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.ExistingCommand(System.String)">
            <summary>
            Metodo para verificar si el comando pasado como parametro existe en la lista de comandos.
            </summary>
            <param name="command">Comando a verificar</param>
            <returns>Si la lista contiene el comando buscado</returns>
        </member>
        <member name="T:Bot.SessionRelated">
            <summary>
            Clase SessionRelated que se ocupa de administrar la lista de usuarios y sus respectivos id's.
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.AllUsers">
            <summary>
            Lista de todos los usuarios
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.DiccUserRelated">
            <summary>
            Diccionario que contiene la id que se relaciona con un usuario
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.DiccUserTokens">
            <summary>
            Diccionario que contiene el token que se relaciona con la empresa
            </summary>
        </member>
        <member name="P:Bot.SessionRelated.Instance">
            <summary>
            Metodo getter para instanciar instance en caso de que sea null para tener una unica instancia de la clase y que sea de acceso global.
            </summary>
            <value>La instancia inicializada</value>
        </member>
        <member name="M:Bot.SessionRelated.#ctor">
            <summary>
            Constructor de la clase SessionRelated
            </summary>
        </member>
        <member name="M:Bot.SessionRelated.AddNewUser(System.String,System.Int32,Bot.Role)">
            <summary>
            Metodo para agregar un nuevo usuario
            </summary>
            <param name="name">Nombre del usuario</param>
            <param name="id">Id del usuario</param>
            <param name="role">Role del usuariro</param>
        </member>
        <member name="M:Bot.SessionRelated.DeleteUser(Bot.User)">
            <summary>
            Metodo para borrar un usuario
            </summary>
            <param name="user">Usuaurio a borrar</param>
        </member>
        <member name="M:Bot.SessionRelated.UsernameExists(System.Int32)">
            <summary>
            Metodo para verificar si existe un usuario
            </summary>
            <param name="id">Id del usuario a verificar</param>
            <returns>true o false</returns>
        </member>
        <member name="M:Bot.SessionRelated.SetChatChannel(System.Int32,Bot.AbstractBot)">
            <summary>
            Metodo para cambiar el canal de comunicacion entre el bot y el usuario
            </summary>
            <param name="id">id del usuario</param>
            <param name="channel">Canal que se va a usar</param>
        </member>
        <member name="M:Bot.SessionRelated.ReturnInfo(System.Int32)">
            <summary>
            Metodo para obtener la informacion relacionada a un usuario
            </summary>
            <param name="id">Id del usuario</param>
            <returns>La informacion del usuario</returns>
        </member>
        <member name="M:Bot.SessionRelated.ReturnCompany(System.String)">
            <summary>
            Metodo para retornar la Company asociada al token generado
            </summary>
            <param name="token">Token que el usuario inserta</param>
            <returns></returns>
        </member>
        <member name="T:Bot.RoleEntrepreneur">
            <summary>
            En esta clase se aplica el patrón Expert porque se necesita que sea experta en toda la información referente al emprendedor y a su lógica, es capáz de modificar
            su información y de llamar a las clases que hace falta para cumplir con sus requerimientos (llamar a las búsquedas, acceder al contacto de empresas).
            </summary>
        </member>
        <member name="F:Bot.RoleEntrepreneur.listHistorialPublications">
            <summary>
            Lista de las publiaciones adquiridas por el emprendedor.
            </summary>
            <typeparam name="Publication">Tipo de la lista devuelta.</typeparam>
            <returns>Lista de tipo Publication.</returns>
        </member>
        <member name="F:Bot.RoleEntrepreneur.heading">
            <summary>
            Rubro.
            </summary>
        </member>
        <member name="M:Bot.RoleEntrepreneur.#ctor(System.String,System.Int32,System.String,Bot.GeoLocation,System.String,System.String)">
            <summary>
            Constructor de la clase Entrepreneur, setea los valores de los parámetros
            y suma un valor al contador de emprendedores estático.
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <param name="heading"></param>
            <param name="geolocation"></param>
            <param name="certification"></param>
            <param name="specialization"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.AddCertification(System.String)">
            <summary>
            Método para agregarle certificaciones al emprendedor
            </summary>
            <param name="certification"></param>
        </member>
        <member name="M:Bot.RoleEntrepreneur.ReturnCertification">
            <summary>
            Método para devolver la lista de certificaciones del emprendedor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.AddSpecialization(System.String)">
            <summary>
            Método para agregarle espcializaciones al emprendedor
            </summary>
            <param name="specialization"></param>
        </member>
        <member name="M:Bot.RoleEntrepreneur.ReturnSpecialization">
            <summary>
            Método para devolver la lista de especializaciones del emprendedor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.SearchingByMaterials(System.String)">
            <summary>
            Buscar publicaciones por material
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.SearchingByLocation(System.String)">
            <summary>
            Buscar publicaciones por ubicación
            </summary>
            <param name="addresToSearch"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.AddHistorialPublication(Bot.Publication)">
            <summary>
            Método público que guarda las Publicaciones adquiridas por el emprendedor.
            </summary>
            <param name="publication">Publicación cerrada.</param>
        </member>
        <member name="M:Bot.RoleEntrepreneur.ReturnListHistorialPublications">
            <summary>
            Devuelve la lista con las publicaciones adquiridas por el emprendedor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.ContactCompany(Bot.Publication)">
            <summary>
            Método que se encarga de llamar al método SetInterestedPerson para que este lo fije
            como InterestedPerson de la clase Publication que prefiera. El método termina devolviendo
            el contacto de la empresa dueña de la publicación.
            </summary>
            <param name="publication"></param>
        </member>
        <member name="T:Bot.ISearch">
            <summary>
            Al tener esta interfaz se cumple con el principio OCP, implementándola podemos extender el código a nuevas formas de búsqueda
            sin cambiar el código de las que ya tenemos.
            También se cumple con el principio DIP porque se depende de una abstracción en lugar de directamente de una clase.
            </summary>
        </member>
        <member name="M:Bot.ISearch.Search(System.String)">
            <summary>
            Método que se implementa tanto en las clases SerachByMaterial, SearchByLocation y en cualquier otra que se agregue
            para hacer una búsqueda.
            </summary>
            <param name="wordToSearch">String por el que se buscará.</param>
            <returns>Devuelve una lista con las publicaciónes que cumplan con la búsqueda.</returns>
        </member>
        <member name="T:Bot.SearchByLocation">
            <summary>
            Esta clase cumple con en patrón Expert porque es experta en cómo hacer una búsqueda por ubicación. Además,
            cumple con el principio SRP dado que su única razón de cambio es cómo buscar una publicación con la ubicación que se le indica.
            </summary>
        </member>
        <member name="M:Bot.SearchByLocation.Search(System.String)">
            <summary>
            Método que búsca todas las publicaciones que contienen la ubicación pasada por parámetro. Recorre todas las
            publicaciones y se fija si tiene la misma ubicación recibida. Si es igual, se agrega la publicación a la lista que 
            va a devolver y se va a fijar a la siguiente.
            </summary>
            <param name="addresToSearch"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.SearchByMaterial">
            <summary>
            Esta clase cumple con en patrón Expert porque es experta en cómo hacer una búsqueda por material. Además, 
            cumple con el principio SRP dado que su única razón de cambio es cómo buscar una publicación 
            que contenga al material que se le indica.
            </summary>
        </member>
        <member name="M:Bot.SearchByMaterial.Search(System.String)">
            <summary>
            Método que búsca todas las publicaciones que contienen el material pasado por parámetro. Recorre todas las
            publicaciones y se fija si alguno de sus materiales, tiene a la palabra que recibió por parámetro,
            dentro de la lista de palabras claves. Si la encuentra, se agrega la publicación a la lista va a devolver 
            y se va a fijar a la siguiente.
            </summary>
            <param name="wordToSearch"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.GeoLocation">
            <summary>
            Clase que depende de la API Location de la UCU.
            </summary>
        </member>
        <member name="P:Bot.GeoLocation.City">
            <summary>
            Ciudad ingresada como parámetro no obligatorio para crear instancia Location.
            </summary>
            <value>String que representa ciudad.</value>
        </member>
        <member name="P:Bot.GeoLocation.Departament">
            <summary>
            Departamento ingresado como parámetro no obligatorio para instancia Location.
            </summary>
            <value>String que representa el departamento.</value>  
        </member>
        <member name="P:Bot.GeoLocation.Address">
            <summary>
            Dirección (calle, número de puerta, etc. o ruta, kilómetro, etc) ingresado como parámetro obligatorio para instancia Location.
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.GeoLocation.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de la clase Geolocation, llama a un método privado asincrono y después se valida la propiedad Found.
            <c>True</c> se asignan los parámetros ingresados a los atributos city, departament y address respectivamente.
            </summary>
            <param name="address">Dirección.</param>
            <param name="city">Ciudad.</param>
            <param name="departament">Departamento.</param>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDistance(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la distancia en kilometros entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular distancia.</param>
            <returns>Distancia de tipo Task double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDuration(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la duración entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular duración.</param>
            <returns>Duración de tipo Task double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.GetLocation">
            <summary>
            Retorna el propio objeto Location y descarga el mapa con la ubicación correspondiente.
            </summary>
            <returns>Objeto mismo.</returns>
        </member>
        <member name="T:Bot.Message">
            <summary>
            Clase Message que guarda el mensaje enviado por el usuario y además, su id.
            </summary>
        </member>
        <member name="M:Bot.Message.#ctor(System.Int32,System.String)">
            <summary>
            Constructor de la clase Message
            </summary>
            <param name="id">Id del usuario que envía el mensaje</param>
            <param name="message">Contenido del mensaje</param>
        </member>
        <member name="P:Bot.Message.UserId">
            <summary>
            Id del usuario que esta charlando
            </summary>
        </member>
        <member name="P:Bot.Message.Text">
            <summary>
            Mensaje del usuario
            </summary>
        </member>
        <member name="T:Bot.CompanyReport">
            <summary>
            clase reporte emprendedor que cumple con el patron SRP, debido a que tiene una responsabilidad unica que es dar el reporte emprendedor. tambien esta clase implementa la interfaz IReport y cumple con el patron ISP.
            </summary>
        </member>
        <member name="F:Bot.CompanyReport.company">
            <summary>
            atributo de la clase 
            </summary>
        </member>
        <member name="M:Bot.CompanyReport.#ctor(Bot.Company)">
            <summary>
            Constructor de la clase CompanyReport
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:Bot.CompanyReport.GiveReport">
            <summary>
            método de la clase ReporteEmpresa
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bot.EntrepreneurReport">
            <summary>
            clase reporte emprendedor que cumple con el patron SRP, debido a que tiene una responsabilidad unica que es dar el reporte emprendedor. esta clase tambien implementa la interfaz IReport y cumple con el patron ISP.
            </summary>
        </member>
        <member name="M:Bot.EntrepreneurReport.#ctor(Bot.RoleEntrepreneur)">
            <summary>
            constructor de la clase emprendedor
            </summary>
            <param name="entrepreneur"></param>
        </member>
        <member name="M:Bot.EntrepreneurReport.GiveReport">
            <summary>
            metodo para entregar el reporte del emprendedor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bot.IReport">
            <summary>
            interfaz con la firma del metodo que devuelve un reporte
            </summary>
        </member>
        <member name="M:Bot.IReport.GiveReport">
            <summary>
            firma del metodo GiveReport
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bot.Role">
            <summary>
            clase abstracta Role.
            </summary>
        </member>
        <member name="M:Bot.Role.#ctor(System.String,System.Int32)">
            <summary>
            constructor de la clase Role
            </summary>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="P:Bot.Role.Name">
            <summary>
            Propiedad para tener get público el atributo name.
            </summary>
            <value></value>
        </member>
        <member name="T:Bot.RoleAdmin">
            <summary>
            Clase RoleAdmin que hereda de la clase Role
            </summary>
        </member>
        <member name="F:Bot.RoleAdmin.globalRatingsList">
            <summary>
            Se inicializa la lista globalRatingsList
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleAdmin.#ctor(System.String,System.Int32)">
            <summary>
            Constructor de la clase RoleAdmin.
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleAdmin.GenerateToken(Bot.Company)">
            <summary>
            Metodo para generar el token. verifica si existe en la lista, si existe, intenta genera uno nuevo si no existe lo agrega en la lista de globalRatings 
            </summary>
            <param name="company"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleAdmin.CodeGeneratortoUserCompany(System.Collections.Generic.List{System.String})">
            <summary>
            Metodo estatico para generar un string alfanumerico unico para una lista dada.
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleAdmin.DeleteRating(System.String)">
            <summary>
            Metodo para eliminar las habilitaciones a la lista "globalRatingsList" 
            </summary>
            <param name="rating"></param>
        </member>
        <member name="T:Bot.RoleUserCompany">
            <summary>
            Clase RoleUserCompany se encarga de servir como representación de un usuario
            que forma parte de una empresa. 
            </summary>
        </member>
        <member name="P:Bot.RoleUserCompany.company">
            <summary>
            Representa la clase Empresa a la cual es añadido.
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.RoleUserCompany.#ctor(Bot.Company,System.String,System.Int32)">
            <summary>
            Constructor que hereda, asi como toda la clase, de la clase ancestro Role.
            </summary>
            <param name="company">Empresa</param>
            <param name="name">Nombre</param>
            <param name="id">Id</param>
        </member>
        <member name="T:Bot.User">
            <summary>
            Clase encargada de representar al usuario (componiendo name, id y role). Esta cumple con el patron SRP y Expert 
            </summary>
        </member>
        <member name="P:Bot.User.Role">
            <summary>
            atributo de la clase User con get y set.
            </summary>
            <value></value>
        </member>
        <member name="P:Bot.User.Id">
            <summary>
            Propiedad para tener get público el atributo id.
            </summary>
            <value>int</value>
        </member>
        <member name="P:Bot.User.Name">
            <summary>
            Propiedad para tener get público el atributo name.
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.User.#ctor(System.String,System.Int32,Bot.Role)">
             <summary>
            Método constructor de la clase User que se encarga de asignar los atributos
            name, id y role que usará la clase.
             </summary>
             <param name="name"></param>
             <param name="id"></param>
             <param name="role"></param>
        </member>
        <member name="T:Bot.UserRelated">
            <summary>
            Clase UserRelated que contiene informacion acerca del usuario.
            </summary>
        </member>
        <member name="P:Bot.UserRelated.Channel">
            <summary>
            Almacena el canal de interaccion con el bot
            </summary>
            <value>Canal de interaccion</value>
        </member>
        <member name="P:Bot.UserRelated.User">
            <summary>
            Almacena el usuario
            </summary>
            <value>Usuario</value>
        </member>
        <member name="P:Bot.UserRelated.Instance">
            <summary>
            Metodo getter para instanciar instance en caso de que sea null para tener una unica instancia de la clase y que sea de acceso global.
            </summary>
            <value>La instancia inicializada</value>
        </member>
        <member name="M:Bot.UserRelated.#ctor">
            <summary>
            Constructor de la clase UserRelated.
            </summary>
        </member>
        <member name="M:Bot.UserRelated.ChangeRoleToUserCompany(Bot.Company)">
            <summary>
            Metodo para cambiar el rol del usuario a UserCompany
            </summary>
            <param name="company">La company que va a tener asociada</param>
        </member>
        <member name="M:Bot.UserRelated.ChangerRoleToAdmin">
            <summary>
            Metodo para cambiar el rol del usuario a Admin
            </summary>
        </member>
        <member name="M:Bot.UserRelated.ChangeRoleToEntrepreneur(System.String,Bot.GeoLocation,System.String,System.String)">
            <summary>
            Metodo para cambiar el rol del usuario a Emprendedor
            </summary>
            <param name="heading">Rubro</param>
            <param name="location">Locacion del usuario</param>
            <param name="certification">Certificacion</param>
            <param name="specialization">Especializacion</param>
        </member>
    </members>
</doc>
