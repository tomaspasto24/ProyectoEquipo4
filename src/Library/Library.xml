<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Bot.AbstractBot">
            <summary>
            Bot abstracto del cual heredarán los bots concretos.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.#ctor">
            <summary>
            Constructor de la clase AbstractBot
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.StartCommunication">
            <summary>
            Metodo publico y abstracto para comenzar la comunicacion entre el usuario y el canal y el bot o la consola.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.ChangeChannel(System.Int32,Bot.AbstractBot)">
            <summary>
            Metodo publico y abstracto para setear el canal de comunicacion entre el usuario y el bot.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.SendMessage(System.Int32,System.String)">
            <summary>
            Metodo para enviar el mensaje por el canal donde se esta comunicando
            </summary>
            <param name="id">id del usuario con el que dialoga el bot</param>
            <param name="text">mensaje que se quiere enviar al usuario</param>
        </member>
        <member name="T:Bot.ConsoleBot">
            <summary>
            Bot concreto de consola que hereda de AbstractBot
            </summary>
        </member>
        <member name="M:Bot.ConsoleBot.#ctor">
            <summary>
            Constructor de ConsoleBot que utiliza el constructor de AbstractBot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.ConsoleBot.SendMessage(System.Int32,System.String)">
            <summary>
            Manda un mensaje, en este caso, por consola.
            </summary>
            <param name="id">Id del usuario con el que dialoga el bot</param>
            <param name="text">Mensaje que se quiere enviar al usuario</param>
        </member>
        <member name="M:Bot.ConsoleBot.StartCommunication">
            <summary>
            Metodo StartCommunication, publico que hace override del metodo declarado en AbstractBot
            Es el metodo que da comienzo a la conversacion entre el usuario y el bot concreto o consola.
            </summary>
        </member>
        <member name="T:Bot.AbstractHandler">
            <summary>
            Clase abstracta para los distintos bots.
            </summary>
        </member>
        <member name="M:Bot.AbstractHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase AbstractHandlers
            </summary>
            <param name="condition">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="P:Bot.AbstractHandler.Succesor">
            <summary>
            Handler sucesor
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.AbstractHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Bot.AbstractHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Bot.AbstractHandler.Handle(Bot.Message,System.String@)">
            <summary>
            Metodo para manejar las peticiones. Si se cumple la condicion, se ejecuta el handler asociado. Sino lo delega a su sucesor.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
        </member>
        <member name="M:Bot.AbstractHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Bot.CommandHandler">
            <summary>
            Handler para mostrar los comandos que el usuario tiene acceso
            </summary>
        </member>
        <member name="M:Bot.CommandHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase CommandHandler
            </summary>
            <param name="condition">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.CommandHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
        </member>
        <member name="P:Bot.IHandler.Succesor">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Bot.IHandler.Handle(Bot.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Bot.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Bot.RegisterHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="T:Bot.RegisterHandler.RegisterState">
            <summary>
            Indica los diferentes estados que puede tener el comando RegisterHandler.
            - Start: El estado inicial del comando. En este estado el comando pide el token de registro
            - ConfirmingToken: Luego de pedir el token. En este estado el comando valida si el token ingresado existe y vuelve al estado Start.
            </summary>
        </member>
        <member name="P:Bot.RegisterHandler.Data">
            <summary>
            Los datos que va obteniendo el comando en los diferentes estados.
            </summary>
        </member>
        <member name="P:Bot.RegisterHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:Bot.RegisterHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="condition">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.RegisterHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
        </member>
        <member name="P:Bot.RegisterHandler.RegisterData.Token">
            <summary>
            El token que se ingresa en el estado ConfirmingToken
            </summary>
        </member>
        <member name="T:Bot.StartHandler">
            <summary>
            Handler para saludar al usuario
            </summary>
        </member>
        <member name="M:Bot.StartHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase StartHandler
            </summary>
            <param name="condition">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.StartHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
        </member>
        <member name="T:Bot.Company">
            <summary>
            Clase que se encarga de representar una Empresa.
            </summary>
        </member>
        <member name="P:Bot.Company.CounterCompanies">
            <summary>
            Contador estático que representa el número de Empresas creadas.
            </summary>
            <value>Entero.</value>
        </member>
        <member name="M:Bot.Company.#ctor(System.String,System.String,Bot.GeoLocation,System.String)">
            <summary>
            Constructor de la clase Empresa, setea los valores de los parámetros y suma un valor al
            contador de empresas estático.
            </summary>
            <param name="nombre">Nombre de la Empresa.</param>
            <param name="rubro">Rubro de la Empresa.</param>
            <param name="location">Ubicación establecida de la Empresa.</param>
            <param name="contacto">Contacto (Teléfono) de la Empresa.</param>
        </member>
        <member name="M:Bot.Company.ReturnContact">
            <summary>
            Devuelve los datos básicos de la empresa (nombre, rubro y contacto).
            </summary>
            <returns>String conteniendo los datos de la Empresa.</returns>
        </member>
        <member name="M:Bot.Company.RegisterCompany">
            <summary>
            Método que registra (agrega) una Empresa a la lista estática de Empresas.
            </summary>
        </member>
        <member name="M:Bot.Company.DeleteCompany">
            <summary>
            Método que elimina la Empresa de la lista estática de Empresas.
            </summary>
        </member>
        <member name="M:Bot.Company.AddUser(Bot.User)">
            <summary>
            Método que se encarga de agregar usuario al conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
        </member>
        <member name="M:Bot.Company.DeleteUser(Bot.User)">
            <summary>
            Método que se encarga de eliminar un uusario del conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
            <returns></returns>
        </member>
        <member name="M:Bot.Company.AddOwnPublication(Bot.Publication)">
            <summary>
            Método que se encarga de agregar una publicación propia de la empresa.
            </summary>
            <param name="publication">Publication</param>
        </member>
        <member name="M:Bot.Company.GetListOwnPublications">
            <summary>
            Método que se encarga de retornar la lista de publicaciones propia de la clase Empresa.
            </summary>
            <returns>List Publication </returns>
        </member>
        <member name="P:Bot.Material.Name">
            <summary>
            Devuelve Atributo nombre del la clase Material.
            </summary>
            <value>String</value>
        </member>
        <member name="M:Bot.Material.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor de la clase Material que se encarga de asignar valores a los 
            atributos name, quantity y price. Construye el Material. En caso de no tener 
            precio, se asigna 0 a su atributo.
            </summary>
            <param name="nombre">String nombre.</param>
            <param name="cantidad">Int cantidad</param>
            <param name="precio">Int precio</param>
        </member>
        <member name="M:Bot.Material.AddKeyWord(System.String)">
            <summary>
            Agrega una palabra clave a la lista de palabras clave
            </summary>
            <param name="palabraClave"></param>
        </member>
        <member name="M:Bot.Material.DeleteKeyWord(System.Int32)">
            <summary>
            El método busca si hay un valor en el indice ingresado como parámetro, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="indicePalabraClave">Indice de la palabra clave que se quiera eliminar.
            Se obtiene con la función DevolverPalabrasClave.</param>
            <returns></returns>
        </member>
        <member name="M:Bot.Material.ReturnKeyWords">
            <summary>
            Método que devuelve todas las Palabras Clave que contiene el Material.
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:Bot.Publication">
            <summary>
            Cada objeto de la clase Publicación, administrado por un objeto Empresa, es el conjunto de items
            que la aplicación muestra a los emprendedores.
            </summary>
        </member>
        <member name="P:Bot.Publication.Title">
            <summary>
            Titulo que representa la publicación. Más que nada para poder retornar una lista
            identificando por título.
            </summary>
            <value>string</value>
        </member>
        <member name="M:Bot.Publication.#ctor(System.String,Bot.Company,Bot.GeoLocation,Bot.Material)">
            <summary>
            Constructor de Publicación, instancia la hora del sistema actual en donde se crea y setea nombreEmpresa y ubicacion.
            </summary>
            <param name="nombreEmpresa">Nombre de la empresa</param>
            <param name="location">Ubicación de la empresa</param>
        </member>
        <member name="M:Bot.Publication.AddMaterial(Bot.Material)">
            <summary>
            Método que agrega a material a la publicación.
            </summary>
            <param name="material">Objeto Material</param>
        </member>
        <member name="M:Bot.Publication.DeleteMaterial(System.Int32)">
            <summary>
            El método busca si hay un valor en el indice ingresado como parámetro, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="indiceMaterial">Indice del Material que se quiera eliminar.
            Se obtiene con la función DevolverListaMateriales.</param>
            <returns></returns>
        </member>
        <member name="M:Bot.Publication.ReturnListMaterials">
            <summary>
            Devuelve un string con todos los materiales enumerados, necesario para poder eliminar un objeto Material.
            </summary>
            <returns>String con todo los materiales enumerados</returns>
        </member>
        <member name="M:Bot.Publication.AddRating(System.String)">
            <summary>
            Agrega una habilitación a la lista de Habilitaciones de la clase Material.
            </summary>
            <param name="habilitacion">String</param>
        </member>
        <member name="M:Bot.Publication.DeleteRating(System.Int32)">
            <summary>
            Elimina una habilitación de la lista de Habilitaciones de la clase Material.
            </summary>
            <param name="indiceHabilitacion">Índice de la Habilitación</param>
            <returns><c>True</c> en caso de que se pueda eliminar, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Publication.ReturnListRatings">
            <summary>
            Retorna la lista de Habilitaciones que tiene el material.s
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:Bot.PublicationSet">
            <summary>
            Conjunto de Publicaciones, clase estática que administra la lista de publicaciones en general.
            </summary>
        </member>
        <member name="P:Bot.PublicationSet.ListPublications">
            <summary>
            Get público que retorna la lista de publicaciones, esto para que la clase Búsqueda pueda 
            manipular eficientemente las Publicaciones.
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.PublicationSet.AddPublication(System.String,Bot.Company,Bot.GeoLocation,Bot.Material)">
            <summary>
            Método que agrega una publicación a la lista publicaciones, toma como parámetro 
            todos los datos para poder crear una instancia de Publicación dentro del método,
            cumpliendo así con el Creator Pattern.
            </summary>
            <param name="title">String Título.</param>
            <param name="company">Clase Empresa.</param>
            <param name="location">Clase Ubicación.</param>
            <param name="material">Clase Material que es tomado como el primero de la Publicación.</param>
        </member>
        <member name="M:Bot.PublicationSet.DeletePublication(System.Int32)">
            <summary>
            Elimina una Publicación de la lista publicaciones, para poder usar el método es necesario 
            haber visto el método ReturnListPublications para poder saber su índice. Retorna 
            <c>True</c> en caso de que se haya eliminado con éxito, en caso contrario <c>Fasle</c>.
            </summary>
            <param name="indicePublicacion">Entero que indica la posición de la Publicación.</param>
            <returns><c>True</c> en caso de que se haya eliminado correctamente y <c>False</c> en caso 
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.DeletePublication(Bot.Publication)">
            <summary>
            Elimina una Publicación de la lista publicaciones.
            </summary>
            <param name="publication">Publication</param>
            <returns><c>True</c> en caso de que se haya eliminado correctamente y <c>False</c> en caso 
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.ReturnListPublications">
            <summary>
            Método que retorna la lista completa de Publicaciones en un string con sus respectivos
            índices.
            </summary>
            <returns>String con el nombre de la Publicación y sus indices.</returns>
        </member>
        <member name="T:Bot.Command">
            <summary>
            Clase Command que se ocupa de guardar las listas de comandos segun el rol del usuario
            </summary>
        </member>
        <member name="P:Bot.Command.CommandsList">
            <summary>
            Lista de comandos
            </summary>
        </member>
        <member name="M:Bot.Command.#ctor">
            <summary>
            Constructor de la clase Command. Asigna a la lista de comandos, todos los comandos disponibles.
            </summary>
        </member>
        <member name="M:Bot.Command.EntrepreneurList">
            <summary>
            Metodo que retorna una lista de comandos para el emprendedor
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.CompanyUserList">
            <summary>
            Metodo que retorna una lista de comandos para el usuario empresa
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.AdminList">
            <summary>
            Metodo que retorna una lista de comnados para el admin
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.ReturnCommands(System.Int32)">
            <summary>
            Metodo para retornar la lista de comandos segun que usuario la pida.
            </summary>
            <param name="userId">Id del usuario que pide la lista de comandos</param>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.ExistingCommand(System.String)">
            <summary>
            Metodo para verificar si el comando pasado como parametro existe en la lista de comandos.
            </summary>
            <param name="command">Comando a verificar</param>
            <returns>Si la lista contiene el comando buscado</returns>
        </member>
        <member name="T:Bot.SessionRelated">
            <summary>
            Clase SessionRelated que se ocupa de administrar la lista de usuarios y sus respectivos id's.
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.AllUsers">
            <summary>
            Lista de todos los usuarios
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.DiccUserRelated">
            <summary>
            Diccionario que contiene la id que se relaciona con un usuario
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.DiccUserTokens">
            <summary>
            Diccionario que contiene el token que se relaciona con la empresa
            </summary>
        </member>
        <member name="M:Bot.SessionRelated.#ctor">
            <summary>
            Constructor de la clase SessionRelated
            </summary>
        </member>
        <member name="M:Bot.SessionRelated.AddNewUser(System.String,System.Int32,Bot.Role)">
            <summary>
            Metodo para agregar un nuevo usuario
            </summary>
            <param name="name">Nombre del usuario</param>
            <param name="id">Id del usuario</param>
            <param name="role">Role del usuariro</param>
        </member>
        <member name="M:Bot.SessionRelated.DeleteUser(Bot.User)">
            <summary>
            Metodo para borrar un usuario
            </summary>
            <param name="user">Usuaurio a borrar</param>
        </member>
        <member name="M:Bot.SessionRelated.UsernameExists(System.Int32)">
            <summary>
            Metodo para verificar si existe un usuario
            </summary>
            <param name="id">Id del usuario a verificar</param>
            <returns>true o false</returns>
        </member>
        <member name="M:Bot.SessionRelated.SetChatChannel(System.Int32,Bot.AbstractBot)">
            <summary>
            Metodo para cambiar el canal de comunicacion entre el bot y el usuario
            </summary>
            <param name="id">id del usuario</param>
            <param name="channel">Canal que se va a usar</param>
        </member>
        <member name="M:Bot.SessionRelated.ReturnInfo(System.Int32)">
            <summary>
            Metodo para obtener la informacion relacionada a un usuario
            </summary>
            <param name="id">Id del usuario</param>
            <returns>La informacion del usuario</returns>
        </member>
        <member name="T:Bot.GeoLocation">
            <summary>
            Clase que depende de la API Location de la UCU.
            </summary>
        </member>
        <member name="P:Bot.GeoLocation.City">
            <summary>
            Ciudad ingresada como parámetro no obligatorio para crear instancia Location.
            </summary>
            <value>String que representa ciudad.</value>
        </member>
        <member name="P:Bot.GeoLocation.Departament">
            <summary>
            Departamento ingresado como parámetro no obligatorio para instancia Location.
            </summary>
            <value>String que representa el departamento.</value>  
        </member>
        <member name="P:Bot.GeoLocation.Address">
            <summary>
            Dirección (calle, número de puerta, etc. o ruta, kilómetro, etc) ingresado como parámetro obligatorio para instancia Location.
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.GeoLocation.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de la clase Geolocation, llama a un método privado asincrono y después se valida la propiedad Found.
            <c>True</c> se asignan los parámetros ingresados a los atributos city, departament y address respectivamente.
            </summary>
            <param name="address">Dirección.</param>
            <param name="city">Ciudad.</param>
            <param name="departament">Departamento.</param>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDistance(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la distancia en kilometros entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular distancia.</param>
            <returns>Distancia de tipo Task double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDuration(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la duración entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular duración.</param>
            <returns>Duración de tipo Task double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.GetLocation">
            <summary>
            Retorna el propio objeto Location y descarga el mapa con la ubicación correspondiente.
            </summary>
            <returns>Objeto mismo.</returns>
        </member>
        <member name="T:Bot.Message">
            <summary>
            Clase Message que guarda el mensaje enviado por el usuario y además, su id.
            </summary>
        </member>
        <member name="M:Bot.Message.#ctor(System.Int32,System.String)">
            <summary>
            Constructor de la clase Message
            </summary>
            <param name="id">Id del usuario que envía el mensaje</param>
            <param name="message">Contenido del mensaje</param>
        </member>
        <member name="P:Bot.Message.UserId">
            <summary>
            Id del usuario que esta charlando
            </summary>
        </member>
        <member name="P:Bot.Message.Text">
            <summary>
            Mensaje del usuario
            </summary>
        </member>
        <member name="T:Bot.CompanyReport">
             <summary>
            clase ReporteEmpresa que implementa la interfaz de IReporte
             </summary>
        </member>
        <member name="F:Bot.CompanyReport.company">
            <summary>
            atributo de la clase 
            </summary>
        </member>
        <member name="M:Bot.CompanyReport.#ctor(Bot.Company)">
            <summary>
            constructor de la clase
            </summary>
            <param name="publications"></param>
        </member>
        <member name="M:Bot.CompanyReport.GiveReport">
            <summary>
            método de la clase ReporteEmpresa
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.Role.#ctor(System.String,System.Int32)">
            <summary>
            cambiar name e id que recibe base
            </summary>
        </member>
        <member name="M:Bot.RoleEntrepreneur.#ctor(System.String,System.Int32,System.String,Bot.GeoLocation,System.String,System.String)">
            <summary>
            Constructor de la clase Entrepreneur, setea los valores de los parámetros 
            y suma un valor al contador de emprendedores estático
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="heading"></param>
            <param name="geolocation"></param>
            <param name="certification"></param>
            <param name="specializations"></param>
        </member>
        <member name="M:Bot.RoleEntrepreneur.AddSpecialization(System.String)">
            <summary>
            Método para agregarle espcializaciones al empresario
            </summary>
            <param name="specializations"></param>
        </member>
        <member name="M:Bot.RoleEntrepreneur.GetReport">
            <summary>
            Método para obtener el reporte del emprendedor 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bot.User">
            <summary>
            Clase encargada de representar al usuario (componiendo id y role).
            </summary>
        </member>
        <member name="P:Bot.User.Id">
            <summary>
            Propiedad para tener get público el atributo id.
            </summary>
            <value>int</value>
        </member>
        <member name="M:Bot.User.#ctor(System.String,System.Int32,Bot.Role)">
            <summary>
            Método constructor de la clase User que se encarga de asignar los atributos
            id y role que usará la clase.
            </summary>
            <param name="id">Id</param>
            <param name="name">Nombre</param>
        </member>
        <member name="T:Bot.UserRelated">
            <summary>
            Clase UserRelated que contiene informacion acerca del usuario.
            </summary>
        </member>
        <member name="M:Bot.UserRelated.#ctor">
            <summary>
            Constructor de la clase UserRelated.
            </summary>
        </member>
    </members>
</doc>
