<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Bot.AbstractBot">
            <summary>
            Bot abstracto del cual heredarán los bots concretos.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.#ctor">
            <summary>
            Constructor de la clase AbstractBot
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.StartCommunication">
            <summary>
            Metodo publico y abstracto para comenzar la comunicacion entre el usuario y el canal y el bot o la consola.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.ChangeChannel(System.String,Bot.AbstractBot)">
            <summary>
            Metodo publico y abstracto para setear el canal de comunicacion entre el usuario y el bot.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.SendMessage(System.String,System.String)">
            <summary>
            Metodo para enviar el mensaje por el canal donde se esta comunicando
            </summary>
            <param name="id">id del usuario con el que dialoga el bot</param>
            <param name="text">mensaje que se quiere enviar al usuario</param>
        </member>
        <member name="M:Bot.AbstractBot.HandleMessage(Bot.Message)">
            <summary>
            Metodo para delegar el mensaje recibido.
            </summary>
            <param name="text">text es el mensaje recibido, de tipo Message. Ademas del mensaje contiene el User Id del usuario</param>
        </member>
        <member name="T:Bot.ConsoleBot">
            <summary>
            Bot concreto de consola que hereda de AbstractBot
            </summary>
        </member>
        <member name="M:Bot.ConsoleBot.#ctor">
            <summary>
            Constructor de ConsoleBot que utiliza el constructor de AbstractBot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.ConsoleBot.SendMessage(System.String,System.String)">
            <summary>
            Manda un mensaje, en este caso, por consola.
            </summary>
            <param name="id">Id del usuario con el que dialoga el bot</param>
            <param name="text">Mensaje que se quiere enviar al usuario</param>
        </member>
        <member name="M:Bot.ConsoleBot.StartCommunication">
            <summary>
            Metodo StartCommunication, publico que hace override del metodo declarado en AbstractBot
            Es el metodo que da comienzo a la conversacion entre el usuario y el bot concreto o consola.
            </summary>
        </member>
        <member name="T:Bot.CommandCondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.CommandCondition.VerifyCondition(Bot.Message)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.ICondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.ICondition.VerifyCondition(Bot.Message)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.LoginCondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.LoginCondition.VerifyCondition(Bot.Message)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.LogoutCondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.LogoutCondition.VerifyCondition(Bot.Message)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.NoCommandCondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.NoCommandCondition.VerifyCondition(Bot.Message)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.RegisterCondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.RegisterCondition.VerifyCondition(Bot.Message)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.StartCondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.StartCondition.VerifyCondition(Bot.Message)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.AbstractHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.AbstractHandler.#ctor(Bot.ICondition)">
            <summary>
            
            </summary>
            <param name="condition"></param>
        </member>
        <member name="P:Bot.AbstractHandler.Succesor">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Bot.AbstractHandler.Condition">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.AbstractHandler.Handler(Bot.Message)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Bot.AbstractHandler.AddSuccesor(Bot.AbstractHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Bot.AbstractHandler.HandleRequest(Bot.Message)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Bot.CommandHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.CommandHandler.#ctor(Bot.CommandCondition)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.CommandHandler.HandleRequest(Bot.Message)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Bot.LoginHandler">
            <summary>
            Handler que se encarga del Login del usuario
            </summary>
        </member>
        <member name="M:Bot.LoginHandler.#ctor(Bot.LoginCondition)">
            <summary>
            Constructor de LoginHandler
            </summary>
            <param name="condition">LoginCondition para asignarlo al handler de la clase</param>
            <returns></returns>
        </member>
        <member name="M:Bot.LoginHandler.HandleRequest(Bot.Message)">
            <summary>
            HandleRequest 
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Bot.LogoutHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.LogoutHandler.#ctor(Bot.LogoutCondition)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.LogoutHandler.HandleRequest(Bot.Message)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Bot.NoCommandHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.NoCommandHandler.#ctor(Bot.NoCommandCondition)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.NoCommandHandler.HandleRequest(Bot.Message)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Bot.RegisterHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.RegisterHandler.#ctor(Bot.RegisterCondition)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.RegisterHandler.HandleRequest(Bot.Message)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Bot.StartHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.StartHandler.#ctor(Bot.StartCondition)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.StartHandler.HandleRequest(Bot.Message)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Bot.Company">
            <summary>
            Clase que se encarga de representar una Empresa.
            </summary>
        </member>
        <member name="P:Bot.Company.CounterCompanies">
            <summary>
            Contador estático que representa el número de Empresas creadas.
            </summary>
            <value>Entero.</value>
        </member>
        <member name="M:Bot.Company.#ctor(System.String,System.String,Bot.GeoLocation,System.String)">
            <summary>
            Constructor de la clase Empresa, setea los valores de los parámetros y suma un valor al
            contador de empresas estático.
            </summary>
            <param name="nombre">Nombre de la Empresa.</param>
            <param name="rubro">Rubro de la Empresa.</param>
            <param name="location">Ubicación establecida de la Empresa.</param>
            <param name="contacto">Contacto (Teléfono) de la Empresa.</param>
        </member>
        <member name="M:Bot.Company.ReturnContact">
            <summary>
            Devuelve los datos básicos de la empresa (nombre, rubro y contacto).
            </summary>
            <returns>String conteniendo los datos de la Empresa.</returns>
        </member>
        <member name="M:Bot.Company.RegisterCompany">
            <summary>
            Método que registra (agrega) una Empresa a la lista estática de Empresas.
            </summary>
        </member>
        <member name="M:Bot.Company.DeleteCompany">
            <summary>
            Método que elimina la Empresa de la lista estática de Empresas.
            </summary>
        </member>
        <member name="M:Bot.Company.AddUser(Bot.User)">
            <summary>
            Método que se encarga de agregar usuario al conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
        </member>
        <member name="M:Bot.Company.DeleteUser(Bot.User)">
            <summary>
            Método que se encarga de eliminar un uusario del conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
            <returns></returns>
        </member>
        <member name="M:Bot.Material.EliminarPalabraClave(System.Int32)">
            <summary>
            El método busca si hay un valor en el indice ingresado como parámetro, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="indicePalabraClave">Indice de la palabra clave que se quiera eliminar.
            Se obtiene con la función DevolverPalabrasClave.</param>
            <returns></returns>
        </member>
        <member name="T:Bot.Publication">
            <summary>
            Cada objeto de la clase Publicación, administrado por un objeto Empresa, es el conjunto de items
            que la aplicación muestra a los emprendedores.
            </summary>
        </member>
        <member name="P:Bot.Publication.Title">
            <summary>
            Titulo que representa la publicación. Más que nada para poder retornar una lista
            identificando por título.
            </summary>
            <value>string</value>
        </member>
        <member name="M:Bot.Publication.#ctor(System.String,Bot.Company,Bot.GeoLocation,Bot.Material)">
            <summary>
            Constructor de Publicación, instancia la hora del sistema actual en donde se crea y setea nombreEmpresa y ubicacion.
            </summary>
            <param name="nombreEmpresa">Nombre de la empresa</param>
            <param name="location">Ubicación de la empresa</param>
        </member>
        <member name="M:Bot.Publication.AddMaterial(Bot.Material)">
            <summary>
            Método que agrega a material a la publicación.
            </summary>
            <param name="material">Objeto Material</param>
        </member>
        <member name="M:Bot.Publication.DeleteMaterial(System.Int32)">
            <summary>
            El método busca si hay un valor en el indice ingresado como parámetro, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="indiceMaterial">Indice del Material que se quiera eliminar.
            Se obtiene con la función DevolverListaMateriales.</param>
            <returns></returns>
        </member>
        <member name="M:Bot.Publication.DevolverListaMateriales">
            <summary>
            Devuelve un string con todos los materiales enumerados, necesario para poder eliminar un objeto Material.
            </summary>
            <returns>String con todo los materiales enumerados</returns>
        </member>
        <member name="T:Bot.PublicationSet">
            <summary>
            Conjunto de Publicaciones, clase estática que administra la lista de publicaciones en general.
            </summary>
        </member>
        <member name="P:Bot.PublicationSet.ListPublications">
            <summary>
            Get público que retorna la lista de publicaciones, esto para que la clase Búsqueda pueda 
            manipular eficientemente las Publicaciones.
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.PublicationSet.AddPublication(System.String,Bot.Company,Bot.GeoLocation,Bot.Material)">
            <summary>
            Método que agrega una publicación a la lista publicaciones, toma como parámetro 
            todos los datos para poder crear una instancia de Publicación dentro del método,
            cumpliendo así con el Creator Pattern.
            </summary>
            <param name="title">String Título.</param>
            <param name="company">Clase Empresa.</param>
            <param name="location">Clase Ubicación.</param>
            <param name="material">Clase Material que es tomado como el primero de la Publicación.</param>
        </member>
        <member name="M:Bot.PublicationSet.DeletePublications(System.Int32)">
            <summary>
            Elimina una Publicación de la lista publicaciones, para poder usar el método es necesario 
            haber visto el método ReturnListPublications para poder saber su índice. Retorna 
            <c>True</c> en caso de que se haya eliminado con éxito, en caso contrario <c>Fasle</c>.
            </summary>
            <param name="indicePublicacion">Entero que indica la posición de la Publicación.</param>
            <returns></returns>
        </member>
        <member name="M:Bot.PublicationSet.ReturnListPublications">
            <summary>
            Método que retorna la lista completa de Publicaciones en un string con sus respectivos
            índices.
            </summary>
            <returns>String con el nombre de la Publicación y sus indices.</returns>
        </member>
        <member name="T:Bot.Command">
            <summary>
            Clase Command que 
            </summary>
        </member>
        <member name="M:Bot.Command.#ctor">
            <summary>
            Constructor de la clase Command. Asigna a la lista de comandos, los comandos basicos que puede tener un usuario.
            </summary>
        </member>
        <member name="M:Bot.Command.ReturnCommands(System.String)">
            <summary>
            Metodo para retornar la lista de comandos segun que usuario la pida.
            </summary>
            <param name="userId">Id del usuario que pide la lista de comandos</param>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.ExistingCommand(System.String)">
            <summary>
            Metodo para verificar si el comando pasado como parametro existe en la lista de comandos.
            </summary>
            <param name="command"></param>
            <returns>Si la lista contiene el comando buscado</returns>
        </member>
        <member name="T:Bot.SessionRelated">
            <summary>
            Clase SessionRelated que se ocupa de administrar la lista de usuarios y sus respectivos id's.
            </summary>
        </member>
        <member name="M:Bot.SessionRelated.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bot.SessionRelated.AddNewUser(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Bot.SessionRelated.DeleteUser(Bot.User)">
            <summary>
            
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Bot.SessionRelated.UsernameExists(System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.SessionRelated.ReturnInfo(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.Setup">
            <summary>
            Clase Setup que contiene el setup de los handlers y sus sucesores, y además, sus respectivas conditions.
            </summary>
        </member>
        <member name="M:Bot.Setup.HandlerSetup">
            <summary>
            Método publico para hacer la configuración de los handlers y conditions.
            </summary>
            <returns>Retorna el primer handler de la cadena de la cadena de handlers.</returns>
        </member>
        <member name="T:Bot.GeoLocation">
            <summary>
            Clase que depende de la API Location de la UCU.
            </summary>
        </member>
        <member name="P:Bot.GeoLocation.City">
            <summary>
            Ciudad ingresada como parámetro no obligatorio para crear instancia Location.
            </summary>
            <value>String que representa ciudad.</value>
        </member>
        <member name="P:Bot.GeoLocation.Departament">
            <summary>
            Departamento ingresado como parámetro no obligatorio para instancia Location.
            </summary>
            <value>String que representa el departamento.</value>  
        </member>
        <member name="P:Bot.GeoLocation.Address">
            <summary>
            Dirección (calle, número de puerta, etc. o ruta, kilómetro, etc) ingresado como parámetro obligatorio para instancia Location.
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.GeoLocation.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de la clase Geolocation, llama a un método privado asincrono y después se valida la propiedad Found.
            <c>True</c> se asignan los parámetros ingresados a los atributos city, departament y address respectivamente.
            </summary>
            <param name="address">Dirección.</param>
            <param name="city">Ciudad.</param>
            <param name="departament">Departamento.</param>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDistance(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la distancia en kilometros entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular distancia.</param>
            <returns>Distancia de tipo Task double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDuration(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la duración entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular duración.</param>
            <returns>Duración de tipo Task double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.GetLocation">
            <summary>
            Retorna el propio objeto Location y descarga el mapa con la ubicación correspondiente.
            </summary>
            <returns>Objeto mismo.</returns>
        </member>
        <member name="T:Bot.Message">
            <summary>
            Clase Message que guarda el mensaje enviado por el usuario y además, su id.
            </summary>
        </member>
        <member name="M:Bot.Message.#ctor(System.String,System.String)">
            <summary>
            Constructor de la clase Message
            </summary>
            <param name="id">Id del usuario que envía el mensaje</param>
            <param name="message">Contenido del mensaje</param>
        </member>
        <member name="T:Bot.ReporteEmpresa">
             <summary>
            clase ReporteEmpresa que implementa la interfaz de IReporte
             </summary>
        </member>
        <member name="F:Bot.ReporteEmpresa.reporte">
            <summary>
            atributo de la clase 
            </summary>
        </member>
        <member name="M:Bot.ReporteEmpresa.#ctor(System.String)">
            <summary>
            constructor de la clase
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Bot.ReporteEmpresa.GiveReport">
            <summary>
            método de la clase ReporteEmpresa
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bot.Admin">
            <summary>
            clase que representa al administrador en el sistema y hereda de usuario
            </summary>
        </member>
        <member name="M:Bot.Admin.#ctor(System.String,System.String)">
            <summary>
            constructor de la clase administador, el "base" se utiliza para inicializar el constructor de la clase usuario
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Bot.Admin.GenerateInvitation">
            <summary>
            metodo para generar invitación
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bot.User">
            <summary>
            clase que representa al Usuario en el sistema
            </summary>
        </member>
        <member name="M:Bot.User.#ctor(System.String,System.String)">
            <summary>
            se registra al usuario
            </summary>
        <member name="M:Bot.UserRelated.#ctor">
            <summary>
            Constructor de la clase UserRelated.
            </summary>
        </member>
    </members>
</doc>
