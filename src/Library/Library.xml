<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Bot.AbstractBot">
            <summary>
            Bot abstracto del cual heredarán los bots concretos.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.#ctor">
            <summary>
            Constructor de la clase AbstractBot
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.StartCommunication">
            <summary>
            Metodo publico y abstracto para comenzar la comunicacion entre el usuario y el canal y el bot o la consola.
            </summary>
        </member>
        <member name="M:Bot.AbstractBot.SendMessage(System.Int32,System.String)">
            <summary>
            Metodo para enviar el mensaje por el canal donde se esta comunicando
            </summary>
            <param name="id">id del usuario con el que dialoga el bot</param>
            <param name="text">mensaje que se quiere enviar al usuario</param>
        </member>
        <member name="T:Bot.ConsoleBot">
            <summary>
            Bot concreto de consola que hereda de AbstractBot
            </summary>
        </member>
        <member name="P:Bot.ConsoleBot.Instance">
            <summary>
            Metodo getter para instanciar instance en caso de que sea null para tener una unica instancia de la clase y que sea de acceso global.
            </summary>
            <value>La instancia inicializada</value>
        </member>
        <member name="M:Bot.ConsoleBot.#ctor">
            <summary>
            Constructor de ConsoleBot que utiliza el constructor de AbstractBot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.ConsoleBot.SendMessage(System.Int32,System.String)">
            <summary>
            Manda un mensaje, en este caso, por consola.
            </summary>
            <param name="id">Id del usuario con el que dialoga el bot</param>
            <param name="text">Mensaje que se quiere enviar al usuario</param>
        </member>
        <member name="M:Bot.ConsoleBot.StartCommunication">
            <summary>
            Metodo StartCommunication, publico que hace override del metodo declarado en AbstractBot
            Es el metodo que da comienzo a la conversacion entre el usuario y el bot concreto o consola.
            </summary>
        </member>
        <member name="T:Bot.AbstractHandler">
            <summary>
            Clase abstracta para los distintos bots.
            </summary>
        </member>
        <member name="M:Bot.AbstractHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase AbstractHandlers
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="P:Bot.AbstractHandler.Succesor">
            <summary>
            Handler sucesor
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.AbstractHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Bot.AbstractHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Bot.AbstractHandler.Handle(Bot.Message,System.String@)">
            <summary>
            Metodo para manejar las peticiones. Si se cumple la condicion, se ejecuta el handler asociado. Sino lo delega a su sucesor.
            </summary>
            <param name="request">Mensaje del usuario</param>
            <param name="response">Respuesta del bot</param>
            <returns></returns>
        </member>
        <member name="M:Bot.AbstractHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Bot.CommandHandler">
            <summary>
            Handler para mostrar los comandos que el usuario tiene acceso
            </summary>
        </member>
        <member name="M:Bot.CommandHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase CommandHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.CommandHandler.EntrepreneurList">
            <summary>
            Metodo que retorna una lista de comandos para el emprendedor
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.CommandHandler.CompanyUserList">
            <summary>
            Metodo que retorna una lista de comandos para el usuario empresa
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.CommandHandler.AdminList">
            <summary>
            Metodo que retorna una lista de comnados para el admin
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.CommandHandler.DefaultList">
            <summary>
            Metodo que retorna una lista de comnados para el admin
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.CommandHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.ContactHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="M:Bot.ContactHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.ContactHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.ConvertUserToEntrepreneurHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="M:Bot.ConvertUserToEntrepreneurHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.ConvertUserToEntrepreneurHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.IHandler">
            <summary>
            Interfaz para los handlers de Chain of Responsability
            </summary>
        </member>
        <member name="P:Bot.IHandler.Succesor">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Bot.IHandler.Handle(Bot.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Bot.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Bot.PublishHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="M:Bot.PublishHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.PublishHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.RegisterHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="P:Bot.RegisterHandler.Data">
            <summary>
            Los datos que va obteniendo el comando en los diferentes estados.
            </summary>
        </member>
        <member name="M:Bot.RegisterHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.RegisterHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.RegisterHandler.RegisterData">
            <summary>
            Clase para almacenar la data relacionada al registro
            </summary>
        </member>
        <member name="P:Bot.RegisterHandler.RegisterData.Token">
            <summary>
            El token que se ingresa en el estado ConfirmingToken
            </summary>
        </member>
        <member name="T:Bot.ReportHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="T:Bot.ReportHandler.ReportState">
            <summary>
            Indica los diferentes estados que puede tener el comando RegisterHandler.
            - Start: El estado inicial del comando. En este estado el comando pide el token de registro
            - ConfirmingToken: Luego de pedir el token. En este estado el comando valida si el token ingresado existe y vuelve al estado Start.
            </summary>
        </member>
        <member name="F:Bot.ReportHandler.ReportState.Start">
            Estado antes de mandar el token
        </member>
        <member name="F:Bot.ReportHandler.ReportState.ConfirmingToken">
            Estado mientras el bot espera y confirma un token
        </member>
        <member name="P:Bot.ReportHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:Bot.ReportHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.ReportHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.SearchHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="M:Bot.SearchHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.SearchHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.StartHandler">
            <summary>
            Handler para saludar al usuario
            </summary>
        </member>
        <member name="M:Bot.StartHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase StartHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.StartHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.TokenHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="M:Bot.TokenHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.TokenHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.UserInformationHandler">
            <summary>
            Handler que se encarga del registro de un usuario
            </summary>
        </member>
        <member name="M:Bot.UserInformationHandler.#ctor(Bot.AbstractHandler)">
            <summary>
            Constructor de la clase RegisterHandler
            </summary>
            <param name="succesor">Condicion que se tiene que cumplir para que se ejecute el handler</param>
        </member>
        <member name="M:Bot.UserInformationHandler.InternalHandle(Bot.Message,System.String@)">
            <summary>
            Metodo que se encarga de atender el handler.
            </summary>
            <param name="request">Mensaje que contiene el texto y el id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Bot.Company">
            <summary>
            Clase que se encarga de representar una Empresa.
            </summary>
        </member>
        <member name="M:Bot.Company.#ctor(System.String,System.String,Bot.GeoLocation,System.String)">
            <summary>
            Constructor de la clase Empresa, setea los valores de los parámetros y suma un valor al
            contador de empresas estático.
            </summary>
            <param name="name">Nombre de la Empresa.</param>
            <param name="item">Rubro de la Empresa.</param>
            <param name="location">Ubicación establecida de la Empresa.</param>
            <param name="contact">Contacto (Teléfono) de la Empresa.</param>
        </member>
        <member name="P:Bot.Company.Name">
            <summary>
            Obtiene nombre de la clase Empresa.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Company.Item">
            <summary>
            Obtiene nombre del rubro de la clase Empresa.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Company.Location">
            <summary>
            Obtiene la ubicación de la clase Empresa.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Company.Contact">
            <summary>
            Obtiene nombre del rubro de la clase Empresa.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Company.ListHistorialPublications">
            <summary>
            Obtiene el historial de publicaciones como una lista de solo lectura para que no se
            pueda agregar o quitar objetos Publication de la instancia obtenida.
            </summary>
            <returns>Lista Publications de solo lectura.</returns>
        </member>
        <member name="P:Bot.Company.ListOwnPublications">
            <summary>
            Obtiene una lista de las publicaciones actuales de la empresa como una lista de solo lectura.
            </summary>
            <returns>Lista Publitacions de solo lectura.</returns>
        </member>
        <member name="P:Bot.Company.ListUsers">
            <summary>
            Obtiene una lista de los usuarios actuales de la empresa como una lista de solo lectura.
            </summary>
            <returns>Lista User de solo lectura.</returns>
        </member>
        <member name="M:Bot.Company.ReturnContact">
            <summary>
            Devuelve los datos básicos de la empresa (nombre, rubro y contacto).
            </summary>
            <returns>String conteniendo los datos de la Empresa.</returns>
        </member>
        <member name="M:Bot.Company.AddUser(Bot.UserInfo)">
            <summary>
            Método que se encarga de agregar usuario al conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
        </member>
        <member name="M:Bot.Company.AddUser(System.Collections.Generic.IReadOnlyList{Bot.UserInfo})">
            <summary>
            Sobrecarga del método AddUser, se encarga de agregar una lista de Usurios a listUsers.
            </summary>
            <param name="listUsers"></param>
        </member>
        <member name="M:Bot.Company.DeleteUser(Bot.UserInfo)">
            <summary>
            Método que se encarga de eliminar un usario del conjunto usuarios de la clase Empresa.
            </summary>
            <param name="user">Clase Usuario.</param>
            <returns>Retorna <c>True</c> en caso de que pueda eliminarse, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Company.AddOwnPublication(Bot.Publication)">
            <summary>
            Método que se encarga de agregar una publicación propia de la empresa.
            </summary>
            <param name="publication">Publicación.</param>
        </member>
        <member name="M:Bot.Company.AddOwnPublication(System.Collections.Generic.IReadOnlyList{Bot.Publication})">
            <summary>
            Sobrecarga del método AddOwnPublication, se encarga de agregar una lista de Publicaciones a listOwnPublications.
            </summary>
            <param name="listPublications">Lista de Publicaciones.</param>
        </member>
        <member name="M:Bot.Company.DeleteOwnPublication(Bot.Publication)">
            <summary>
            Método que se encarga de eliminar una publicación propia de la empresa.
            </summary>
            <param name="publication">Publicación.</param>
            <returns>Retorna <c>True</c> en caso de que pueda eliminarse, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Company.AddListHistorialPublication(Bot.Publication)">
            <summary>
            Método que se encarga de añadir una clase Publicación a ListHistorialPublications.
            </summary>
            <param name="publication">Publicación a añadir.</param>
        </member>
        <member name="M:Bot.Company.AddListHistorialPublication(System.Collections.Generic.IReadOnlyList{Bot.Publication})">
            <summary>
            Sobrecarga del método AddListHistorialPublication, se encarga de agregar una lista de Publicaciones a listHistorialPublications.
            </summary>
            <param name="listPublications"></param>
        </member>
        <member name="T:Bot.CompanySet">
            <summary>
            Conjunto de Empresas, clase que se encarga de administrar la lista de Empresas en general. Su constructor se encuentra 
            privado para que no sea posible crear más de una instancia de la clase, para obtener la instancia se necesita llamar al método
            GetInstance que devuelve la única instancia que puede ser usada, cumpliendo así con el patrón de diseño Singleton.
            </summary>
        </member>
        <member name="P:Bot.CompanySet.Instance">
            <summary>
            Obtiene el acceso a la propia instancia de la clase CompanySet,
            en caso de que la variable _instance no este creada, la crea y la retorna. En caso 
            contrario de que anteriormente este creada simplemente la retorna, asi se asegura de que
            siempre se use la misma variable instancia y se cumpla con Singleton.
            </summary>
            <returns>Instancia CompanySet.</returns>
        </member>
        <member name="P:Bot.CompanySet.ListCompanies">
            <summary>
            Obtiene la lista de Empresas.
            </summary>
            <value>Lista de solo lectura de clase Empresa.</value>
        </member>
        <member name="M:Bot.CompanySet.AddElement(System.String,System.String,Bot.GeoLocation,System.String)">
            <summary>
            Método que se encarga de agregar una Empresa a la lista de Empresas del sistema.
            </summary>
            <param name="name">Nombre de Empresa.</param>
            <param name="item">Rubro de Empresa.</param>
            <param name="location">Ubicación de Empresa.</param>
            <param name="contact">Contacto de Empresa.</param>
            <returns><c>True</c> en caso de que se pueda agregar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.CompanySet.AddElement(Bot.Company)">
            <summary>
            Método que se encarga de agregar una Empresa a la lista de Empresas del sistema.
            </summary>
            <param name="element">Elemento Empresa.</param>
            <returns><c>True</c> en caso de que se pueda agregar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.CompanySet.DeleteElement(Bot.Company)">
            <summary>
            Método que se encarga de eliminar una Empresa de la lista de Empresas del sistema.
            </summary>
            <param name="element">Empresa.</param>
            <returns><c>True</c> en caso de que se haya eliminado correctamente y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.CompanySet.ReturnListElements">
            <summary>
            Método que retorna la lista completa de Empresas en un string con sus respectivos
            índices.
            </summary>
            <returns>String con el nombre de la Empresa y sus indices.</returns>
        </member>
        <member name="M:Bot.CompanySet.ContainsElementInListElements(Bot.Company)">
            <summary>
            Método simple que se encarga de comprobar si una clase Empresa se encuentra
            en el sistema de Empresas.
            </summary>
            <param name="element">Empresa.</param>
            <returns><c>True</c> en caso de encontrarse en el sistema y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.CompanySet.ContainsElementInListElements(System.String)">
            <summary>
            Sobrecarga de ContainsCompanyInListCompanies, se encarga de comprobar si el nombre de una clase Empresa se encuentra
            en la lista de Empresas.
            </summary>
            <param name="elementName">Nombre de Empresa.</param>
            <returns><c>True</c> en caso de encontrarse en el sistema y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="T:Bot.ISet`1">
            <summary>
            Interfaz pública ISet para CompanySet y PublicationSet.
            </summary>
            <typeparam name="T">Elemento T (Empresa o Publicación).</typeparam>
        </member>
        <member name="M:Bot.ISet`1.AddElement(`0)">
            <summary>
            Método que se encarga de agregar un elemento a la lista de elementos del propio Set en cuestión.
            </summary>
            <param name="element">Elemento.</param>
            <returns><c>True</c> en caso de que se pueda agregar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.ISet`1.DeleteElement(`0)">
            <summary>
            Método que se encarga de eliminar un elemento a la lista de elementos del propio Set en cuestión.
            </summary>
            <param name="element">Elemento.</param>
            <returns><c>True</c> en caso de que se pueda eliminar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.ISet`1.ReturnListElements">
            <summary>
            Método que retorna en forma de string la lista de elementos.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:Bot.ISet`1.ContainsElementInListElements(`0)">
            <summary>
            Método que se encarga de buscar el elemento en la lista de elementos y retornar si se encuentra o no.
            </summary>
            <param name="element"></param>
            <returns><c>True</c> en caso de que se pueda encontrar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.ISet`1.ContainsElementInListElements(System.String)">
            <summary>
            Sobrecarga del método ContainsElementInListElements, mismo funcionamiento pero con el nombre del elemento.
            </summary>
            <param name="elementName">Nombre del elemento.</param>
            <returns><c>True</c> en caso de que se pueda encontrar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="T:Bot.Material">
            <summary>
            Clase Material que cumple con el patrón Expert ya que todos los calculos que hace, los realiza con
            datos internos que solo la clase Material conoce.
            </summary>
        </member>
        <member name="M:Bot.Material.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Método de la clase Material que se encarga de asignar valores a los atributos name, quantity y price. Construye el Material. En caso de no tener precio, se asigna 0 a su atributo.
            </summary>
            <param name="name">String nombre.</param>
            <param name="quantity">Entero cantidad.</param>
            <param name="price">Entero precio.</param>
        </member>
        <member name="P:Bot.Material.Name">
            <summary>
            Obtiene nombre del la clase Material.
            </summary>
            <value>String.</value>
        </member>
        <member name="P:Bot.Material.KeyWords">
            <summary>
            Obtiene todas las Palabras Clave que contiene el Material.
            </summary>
            <returns>Cadena de caracteres.</returns>
        </member>
        <member name="P:Bot.Material.Quantity">
            <summary>
            Obtiene cantidad del la clase Material.
            </summary>
            <value>Entero.</value>
        </member>
        <member name="P:Bot.Material.Price">
            <summary>
            Obtiene precio del la clase Material.
            </summary>
            <value>Entero.</value>
        </member>
        <member name="M:Bot.Material.AddKeyWord(System.String)">
            <summary>
            Agrega una palabra clave a la lista de palabras clave.
            </summary>
            <param name="keyWord">Palabra clave.</param>
        </member>
        <member name="M:Bot.Material.DeleteKeyWord(System.String)">
            <summary>
            El método busca si hay un valor del string ingresado como parámetro, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="keyWord">Cadena de caracteres de la palabra clave que se quiera eliminar.</param>
            <returns><c>True</c> en caso de que se pueda eliminar, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:Bot.Publication">
            <summary>
            Cada objeto de la clase Publicación, administrado por un objeto Empresa, es el conjunto de items
            que la aplicación muestra a los emprendedores.
            </summary>
        </member>
        <member name="M:Bot.Publication.#ctor(System.String,Bot.Company,Bot.GeoLocation,Bot.Material)">
            <summary>
            Constructor de Publicación, instancia la hora del sistema actual en donde se crea y setea nombreEmpresa, ubicacion, material y titulo de la publicacion.
            </summary>
            <param name="title">Titulo.</param>
            <param name="company">Empresa.</param>
            <param name="location">Ubicación.</param>
            <param name="material">Material.</param>
        </member>
        <member name="P:Bot.Publication.InterestedPerson">
            <summary>
            Obtiene una instancia de RoleEntrepreneur que referencia al emprendedor interesado.
            </summary>
            <value>Rol Emprendedor.</value>
        </member>
        <member name="P:Bot.Publication.Title">
            <summary>
            Obtiene titulo que representa la publicación. Más que nada para poder retornar una lista
            identificando por título.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Publication.Company">
            <summary>
            Obtiene clase Empresa dueña de la clase Publicación. Get público.
            </summary>
            <value>Empresa.</value>
        </member>
        <member name="P:Bot.Publication.Location">
            <summary>
            Obtiene la ubicación de la publicación.
            </summary>
            <value>GeoLocation.</value>
        </member>
        <member name="P:Bot.Publication.Date">
            <summary>
            Obtiene el atributo Date que devuelve la hora en la que se crea la clase Publicacación.
            Es decir, cuando el constructor de la clase se ejecuta.
            </summary>
            <value>DateTime.</value>
        </member>
        <member name="P:Bot.Publication.ClosedDate">
            <summary>
            Obtiene el atributo Date que devuelve la hora en la que se cierra la clase Publicacación.
            Es decir, cuando el método ClosePublication es ejecutado.
            </summary>
            <value>DateTime.</value>
        </member>
        <member name="P:Bot.Publication.ListMaterials">
            <summary>
            Obtiene una lista de solo lectura con todos los materiales.
            </summary>
            <returns>Lista de solo lectura de Material.</returns>
        </member>
        <member name="P:Bot.Publication.ListQualifications">
            <summary>
            Obtiene una lista de solo lectura de los string Habilitaciones.
            </summary>
            <value>Lista de solo lectura de cadena de caracteres.</value>
        </member>
        <member name="P:Bot.Publication.IsClosed">
            <summary>
            Obtiene un valor que indica si el estado de la publicación es abierto o cerrado.
            </summary>
            <value>Booleano.</value>
        </member>
        <member name="M:Bot.Publication.AddMaterial(Bot.Material)">
            <summary>
            Método que agrega a material a la publicación.
            </summary>
            <param name="material">Objeto Material.</param>
        </member>
        <member name="M:Bot.Publication.AddMaterial(System.Collections.Generic.IReadOnlyList{Bot.Material})">
            <summary>
            Sobrecarga de AddMaterial que agrega una lista de materiales a listMaterials.
            </summary>
            <param name="listMaterials"></param>
        </member>
        <member name="M:Bot.Publication.DeleteMaterial(Bot.Material)">
            <summary>
            El método busca si hay un valor igual a la instancia Material ingresada, en caso de que exista un elemento:
            lo elimina y retorna True. De lo contrario solamente retorna False.
            </summary>
            <param name="material">Indice del Material que se quiera eliminar.
            Se obtiene con la función DevolverListaMateriales.</param>
            <returns><c>True</c> en caso de que se elimine correctamente, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Publication.ClosePublication">
            <summary>
            Cierra la clase Publicación por completo, asigna <c>True</c> a la variable IsClosed y
            llama al método DeletePublications para eliminarse a si misma de la lista estática de publicaciones
            de la clase conjunto publicaciones, además de esto retorna la persona que estuvo interesada.
            </summary>
            <returns>Usuario que estuvo interesado en adquirir el producto.</returns>
        </member>
        <member name="M:Bot.Publication.AddQualification(System.String)">
            <summary>
            Agrega una habilitación a la lista de Habilitaciones de la clase Material.
            </summary>
            <param name="qualification">String.</param>
        </member>
        <member name="M:Bot.Publication.AddQualification(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Sobrecarga del método AddQualification que agrega una lista de Habilitaciones a listQualifications.
            </summary>
            <param name="listQualifications"></param>
        </member>
        <member name="M:Bot.Publication.DeleteQualification(System.String)">
            <summary>
            Elimina una habilitación de la lista de Habilitaciones de la clase Material.
            </summary>
            <param name="qualification">Índice de la Habilitación.</param>
            <returns><c>True</c> en caso de que se pueda eliminar, <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:Bot.Publication.SetInterestedPerson(Bot.RoleEntrepreneur)">
            <summary>
            Método que setea a la persona interesada (RolEmprendedor) en el atributo InterestedPerson.
            Debe ser llamado por el método ContactCompany de la clase RolEmprendedor.
            </summary>
            <param name="interestedPerson">InterestedPerson.</param>
        </member>
        <member name="T:Bot.PublicationSet">
            <summary>
            Conjunto de Publicaciones, clase que se encarga de administrar la lista de Publicaciones en general. Su constructor se encuentra 
            privado para que no sea posible crear más de una instancia de la clase, para obtener la instancia se necesita llamar al método
            GetInstance que devuelve la única instancia que puede ser usada, cumpliendo así con el patrón de diseño Singleton.
            </summary>
        </member>
        <member name="P:Bot.PublicationSet.Instance">
            <summary>
            Obtiene el acceso a la propia instancia de la clase PublicationSet,
            en caso de que la variable _instance no este creada, la crea y la retorna. En caso 
            contrario de que anteriormente este creada simplemente la retorna, asi se asegura de que
            siempre se use la misma variable instancia y se cumpla con Singleton.
            </summary>
            <returns>Instancia PublicationSet.</returns>
        </member>
        <member name="P:Bot.PublicationSet.ListPublications">
            <summary>
            Obtiene la lista de Publicaciones.
            </summary>
            <value>Lista de solo lectura de clase Publicación.</value>
        </member>
        <member name="M:Bot.PublicationSet.AddElement(Bot.Publication)">
            <summary>
            Método que se encarga de agregar una Publicación a la lista de Publicaciones del sistema.
            </summary>
            <param name="element">Elemento Publicación.</param>
            <returns><c>True</c> en caso de que se pueda agregar y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.DeleteElement(Bot.Publication)">
            <summary>
            Método que se encarga de eliminar una Publicación de la lista de Publicaciones del sistema.
            </summary>
            <param name="element">Publicación.</param>
            <returns><c>True</c> en caso de que se haya eliminado correctamente y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.ReturnListElements">
            <summary>
            Método que retorna la lista completa de Publicaciones en un string.
            </summary>
            <returns>String con los nombres de las Publicaciones.</returns>
        </member>
        <member name="M:Bot.PublicationSet.ContainsElementInListElements(Bot.Publication)">
            <summary>
            Método simple que se encarga de comprobar si una clase Publicación se encuentra
            en el sistema de Publicaciones.
            </summary>
            <param name="element">Publicación.</param>
            <returns><c>True</c> en caso de encontrarse en el sistema y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Bot.PublicationSet.ContainsElementInListElements(System.String)">
            <summary>
            Sobrecarga de ContainsElementInListElements, se encarga de comprobar si el nombre de una clase Publicación se encuentra
            en la lista de Publicaciones.
            </summary>
            <param name="elementName">Nombre de Publicación.</param>
            <returns><c>True</c> en caso de encontrarse en el sistema y <c>False</c> en caso
            contrario.</returns>
        </member>
        <member name="T:Bot.Command">
            <summary>
            Clase Command que se ocupa de guardar las listas de comandos segun el rol del usuario
            </summary>
        </member>
        <member name="P:Bot.Command.CommandsList">
            <summary>
            Lista de comandos
            </summary>
        </member>
        <member name="M:Bot.Command.#ctor">
            <summary>
            Constructor de la clase Command. Asigna a la lista de comandos, todos los comandos disponibles.
            </summary>
        </member>
        <member name="M:Bot.Command.EntrepreneurList">
            <summary>
            Metodo que retorna una lista de comandos para el emprendedor
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.CompanyUserList">
            <summary>
            Metodo que retorna una lista de comandos para el usuario empresa
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.AdminList">
            <summary>
            Metodo que retorna una lista de comnados para el admin
            </summary>
            <returns>Lista de comandos</returns>
        </member>
        <member name="M:Bot.Command.ReturnCommands(System.Int32)">
            <summary>
            Metodo para retornar la lista de comandos segun que usuario la pida.
            </summary>
            <param name="userId">Id del usuario que pide la lista de comandos</param>
            <returns>Lista de comandos</returns>
        </member>
        <member name="T:Bot.SessionRelated">
            <summary>
            Clase SessionRelated que se ocupa de administrar la lista de usuarios y sus respectivos id's.
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.AllUsers">
            <summary>
            Lista de todos los usuarios
            </summary>
        </member>
        <member name="F:Bot.SessionRelated.DiccUserTokens">
            <summary>
            Diccionario que contiene el token que se relaciona con la empresa
            </summary>
        </member>
        <member name="P:Bot.SessionRelated.Instance">
            <summary>
            Metodo getter para instanciar instance en caso de que sea null para tener una unica instancia de la clase y que sea de acceso global.
            </summary>
            <value>La instancia inicializada</value>
        </member>
        <member name="M:Bot.SessionRelated.#ctor">
            <summary>
            Constructor de la clase SessionRelated
            </summary>
        </member>
        <member name="M:Bot.SessionRelated.AddNewUser(Bot.UserInfo)">
            <summary>
            Metodo para agregar un nuevo usuario
            </summary>
            <param name="name">Nombre del usuario</param>
            <param name="id">Id del usuario</param>
            <param name="role">Role del usuariro</param>
        </member>
        <member name="M:Bot.SessionRelated.DeleteUser(Bot.UserInfo)">
            <summary>
            Metodo para borrar un usuario
            </summary>
            <param name="user">Usuaurio a borrar</param>
        </member>
        <member name="M:Bot.SessionRelated.UsernameExists(System.Int64)">
            <summary>
            Metodo para verificar si existe un usuario
            </summary>
            <param name="id">Id del usuario a verificar</param>
            <returns>true o false</returns>
        </member>
        <member name="M:Bot.SessionRelated.GetUserById(System.Int64)">
            <summary>
            Metodo para obtener el usuario relacionado al id.
            </summary>
            <param name="id">Id del usuario</param>
            <returns>El usuario</returns>
        </member>
        <member name="M:Bot.SessionRelated.GetCompanyByToken(System.String)">
            <summary>
            Metodo para retornar la Company asociada al token generado
            </summary>
            <param name="token">Token que el usuario inserta</param>
            <returns></returns>
        </member>
        <member name="T:Bot.RoleEntrepreneur">
            <summary>
            En esta clase se aplica el patrón Expert porque se necesita que sea experta en toda la información referente al emprendedor y a su lógica, es capáz de modificar
            su información y de llamar a las clases que hace falta para cumplir con sus requerimientos (llamar a las búsquedas, acceder al contacto de empresas).
            </summary>
        </member>
        <member name="F:Bot.RoleEntrepreneur.listHistorialPublications">
            <summary>
            Lista de las publiaciones adquiridas por el emprendedor.
            </summary>
            <typeparam name="Publication">Publicación.</typeparam>
            <returns>Coleción de tipo Publication.</returns>
        </member>
        <member name="F:Bot.RoleEntrepreneur.heading">
            <summary>
            Rubro.
            </summary>
        </member>
        <member name="M:Bot.RoleEntrepreneur.#ctor(System.String,Bot.GeoLocation)">
            <summary>
            Constructor de la clase Entrepreneur, setea los valores de los parámetros
            y suma un valor al contador de emprendedores estático.
            </summary>
            <param name="heading">Rubro.</param>
            <param name="geolocation">Ubicación.</param>
            <returns>No se devuelve, se procede con la inicialización de la instancia de clase.</returns>
        </member>
        <member name="P:Bot.RoleEntrepreneur.ReturnCertification">
            <summary>
            Obtiene la lista de certificaciones del emprendedor.
            </summary>
            <returns>Lista de certificaciones.</returns>
        </member>
        <member name="P:Bot.RoleEntrepreneur.ReturnSpecialization">
            <summary>
            Obtiene la lista de especializaciones del emprendedor.
            </summary>
            <returns>Lista de especializaciones.</returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.AddCertification(System.String)">
            <summary>
            Método para agregarle certificaciones al emprendedor.
            </summary>
            <param name="certification">Certificación.</param>
        </member>
        <member name="M:Bot.RoleEntrepreneur.AddSpecialization(System.String)">
            <summary>
            Método para agregarle espcializaciones al emprendedor.
            </summary>
            <param name="specialization">Especialización.</param>
        </member>
        <member name="M:Bot.RoleEntrepreneur.SearchingByMaterials(System.String)">
            <summary>
            Buscar publicaciones por material.
            </summary>
            <param name="wordToSearch"></param>
            <returns>Lista de publicaciones con el material buscado, si hay alguna que lo contenga.</returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.SearchingByLocation(System.String)">
            <summary>
            Buscar publicaciones por ubicación.
            </summary>
            <param name="addresToSearch">Palabra clave como ubicación.</param>
            <returns>Lista de publicaciones con la ubicación indicada, si hay alguna.</returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.AddHistorialPublication(Bot.Publication)">
            <summary>
            Método público que guarda las Publicaciones adquiridas por el emprendedor.
            </summary>
            <param name="publication">Publicación.</param>
        </member>
        <member name="M:Bot.RoleEntrepreneur.ReturnListHistorialPublications">
            <summary>
            Devuelve la lista con las publicaciones que están en el historial de las adquiridas por el emprendedor.
            </summary>
            <returns>Lista de publicaciones.</returns>
        </member>
        <member name="M:Bot.RoleEntrepreneur.ContactCompany(Bot.Publication)">
            <summary>
            Método que se encarga de llamar al método SetInterestedPerson para que este lo fije
            como InterestedPerson de la clase Publication que prefiera. El método termina devolviendo
            el contacto de la empresa dueña de la publicación.
            </summary>
            <param name="publication">Publicación de la cual se requiere saber el contacto.</param>
            <returns>Contacto de la empresa de la publicación como un string.</returns>
        </member>
        <member name="T:Bot.ISearch">
            <summary>
            Al tener esta interfaz se cumple con el principio OCP, implementándola podemos extender el código a nuevas formas de búsqueda
            sin cambiar el código de las que ya tenemos.
            También se cumple con el principio DIP porque se depende de una abstracción en lugar de directamente de una clase.
            </summary>
        </member>
        <member name="M:Bot.ISearch.Search(System.String)">
            <summary>
            Método que se implementa tanto en las clases SerachByMaterial, SearchByLocation y en cualquier otra que se agregue
            para hacer una búsqueda.
            </summary>
            <param name="wordToSearch">String por el que se buscará.</param>
            <returns>Devuelve una lista con las publicaciónes que cumplan con la búsqueda.</returns>
        </member>
        <member name="T:Bot.SearchByLocation">
            <summary>
            Esta clase cumple con en patrón Expert porque es experta en cómo hacer una búsqueda por ubicación. Además,
            cumple con el principio SRP dado que su única razón de cambio es cómo buscar una publicación con la ubicación que se le indica.
            </summary>
        </member>
        <member name="M:Bot.SearchByLocation.Search(System.String)">
            <summary>
            Método que búsca todas las publicaciones que contienen la ubicación pasada por parámetro. Recorre todas las
            publicaciones y se fija si tiene la misma ubicación recibida. Si es igual, se agrega la publicación a la lista que 
            va a devolver y se va a fijar a la siguiente.
            </summary>
            <param name="addresToSearch">Dirección para buscar.</param>
            <returns>Lista de Publicaciones.</returns>
        </member>
        <member name="T:Bot.SearchByMaterial">
            <summary>
            Esta clase cumple con en patrón Expert porque es experta en cómo hacer una búsqueda por material. Además, 
            cumple con el principio SRP dado que su única razón de cambio es cómo buscar una publicación 
            que contenga al material que se le indica.
            </summary>
        </member>
        <member name="M:Bot.SearchByMaterial.Search(System.String)">
            <summary>
            Método que búsca todas las publicaciones que contienen el material pasado por parámetro. Recorre todas las
            publicaciones y se fija si alguno de sus materiales, tiene a la palabra que recibió por parámetro,
            dentro de la lista de palabras claves. Si la encuentra, se agrega la publicación a la lista va a devolver 
            y se va a fijar a la siguiente.
            </summary>
            <param name="wordToSearch"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.GeoLocation">
            <summary>
            Clase que depende de la API Location de la UCU.
            </summary>
        </member>
        <member name="M:Bot.GeoLocation.#ctor(System.String,System.String)">
            <summary>
            Constructor de la clase Geolocation, llama a un método privado asincrono y después se valida la propiedad Found.
            <c>True</c> se asignan los parámetros ingresados a los atributos city, departament y address respectivamente.
            </summary>
            <param name="address">Dirección.</param>
            <param name="city">Ciudad.</param>
        </member>
        <member name="P:Bot.GeoLocation.City">
            <summary>
            Obtiene ciudad ingresada como parámetro no obligatorio para crear instancia Location.
            </summary>
            <value>String que representa ciudad.</value>
        </member>
        <member name="P:Bot.GeoLocation.Address">
            <summary>
            Obtiene dirección (calle, número de puerta, etc. o ruta, kilómetro, etc) ingresado como parámetro obligatorio para instancia Location.
            </summary>
            <value>Cadena de caracteres.</value>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDistance(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la distancia en kilometros entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular distancia.</param>
            <returns>Distancia de tipo double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.CalculateDuration(Bot.GeoLocation)">
            <summary>
            Calcula y retorna la duración entre la propia instancia de clase y la ingresada como parámetro.
            </summary>
            <param name="secondLocation">Segunda clase a calcular duración.</param>
            <returns>Duración de tipo double.</returns>
        </member>
        <member name="M:Bot.GeoLocation.GetLocation">
            <summary>
            Retorna el propio objeto Location y descarga el mapa con la ubicación correspondiente.
            </summary>
            <returns>Objeto mismo.</returns>
        </member>
        <member name="M:Bot.GeoLocation.IsValid">
            <summary>
            Método que revisa si se puede encontrar la ubicación construida.
            </summary>
            <returns><c>True</c> en caso de que la ubicación sea válida, <c>False</c> en caso de no ser válida.</returns>
        </member>
        <member name="T:Bot.Message">
            <summary>
            Clase Message que guarda el mensaje enviado por el usuario y además, su id.
            </summary>
        </member>
        <member name="M:Bot.Message.#ctor(System.Int64,System.String)">
            <summary>
            Constructor de la clase Message
            </summary>
            <param name="id">Id del usuario que envía el mensaje</param>
            <param name="message">Contenido del mensaje</param>
        </member>
        <member name="P:Bot.Message.UserId">
            <summary>
            Id del usuario que esta charlando
            </summary>
        </member>
        <member name="P:Bot.Message.Text">
            <summary>
            Mensaje del usuario
            </summary>
        </member>
        <member name="T:Bot.CompanyReport">
            <summary>
            clase reporte emprendedor que cumple con el patron SRP, debido a que tiene una responsabilidad unica que es dar el reporte emprendedor. tambien esta clase implementa la interfaz IReport y cumple con el patron ISP.
            </summary>
        </member>
        <member name="F:Bot.CompanyReport.company">
            <summary>
            atributo de la clase.
            </summary>
        </member>
        <member name="M:Bot.CompanyReport.#ctor(Bot.Company)">
            <summary>
            Constructor de la clase CompanyReport.
            </summary>
            <param name="company">El nombre de la compania.</param>
        </member>
        <member name="M:Bot.CompanyReport.GiveReport">
            <summary>
            método de la clase ReporteEmpresa el cual se encarga de generar el reporte y devolverlo.
            </summary>
            <returns>El reporte de la empresa.</returns>
        </member>
        <member name="T:Bot.EntrepreneurReport">
            <summary>
            clase reporte emprendedor que cumple con el patron SRP, debido a que tiene una responsabilidad unica que es dar el reporte emprendedor. esta clase tambien implementa la interfaz IReport y cumple con el patron ISP.
            </summary>
        </member>
        <member name="M:Bot.EntrepreneurReport.#ctor(Bot.RoleEntrepreneur)">
            <summary>
            constructor de la clase emprendedor.
            </summary>
            <param name="entrepreneur">El nombre del emprendedor.</param>
        </member>
        <member name="M:Bot.EntrepreneurReport.GiveReport">
            <summary>
            metodo para entregar el reporte del emprendedor.
            </summary>
            <returns>El reporte del emprendedor.</returns>
        </member>
        <member name="T:Bot.IReport">
            <summary>
            interfaz con la firma del metodo que devuelve un reporte
            </summary>
        </member>
        <member name="M:Bot.IReport.GiveReport">
            <summary>
            firma del metodo GiveReport
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bot.IRole">
            <summary>
            Interfaz que representa los roles
            </summary>
        </member>
        <member name="T:Bot.RoleAdmin">
            <summary>
            Clase RoleAdmin que implementa la interfaz IRole
            </summary>
        </member>
        <member name="F:Bot.RoleAdmin.globalQualificationList">
            <summary>
            Se inicializa la lista globalQualificationList
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bot.RoleAdmin.GenerateToken(Bot.Company)">
            <summary>
            Metodo para generar el token. verifica si existe en la lista, si existe, intenta genera uno nuevo si no existe lo agrega en la lista de globalRatings 
            </summary>
            <param name="company"></param>
            <returns></returns>
        </member>
        <member name="T:Bot.RoleDefault">
            <summary>
            Clase RoleAdmin que implementa la interfaz IRole
            </summary>
        </member>
        <member name="T:Bot.RoleUserCompany">
            <summary>
            Clase RoleUserCompany se encarga de servir como representación de un usuario
            que forma parte de una empresa. 
            </summary>
        </member>
        <member name="P:Bot.RoleUserCompany.company">
            <summary>
            Representa la clase Empresa a la cual es añadido.
            </summary>
            <value></value>
        </member>
        <member name="M:Bot.RoleUserCompany.#ctor(Bot.Company)">
            <summary>
            Constructor que hereda, asi como toda la clase, de la clase ancestro Role.
            </summary>
            <param name="company">Empresa</param>
        </member>
        <member name="T:Bot.State">
            <summary>
            Indica los diferentes estados que puede tener el comando RegisterHandler.
            - Start: El estado inicial del comando. En este estado el comando pide el token de registro
            - ConfirmingToken: Luego de pedir el token. En este estado el comando valida si el token ingresado existe y vuelve al estado Start.
            </summary>
        </member>
        <member name="F:Bot.State.Start">
            Estado antes de mandar el token
        </member>
        <member name="F:Bot.State.ConfirmingToken">
            Estado mientras el bot espera y confirma un token
        </member>
        <member name="T:Bot.TokenGenerator">
            <summary>
            Clase TokenGenerator.
            </summary>
        </member>
        <member name="P:Bot.TokenGenerator.Instance">
            <summary>
            Metodo para generar una instancia de token.
            </summary>
            <value>Instancia del Token. </value>
        </member>
        <member name="F:Bot.TokenGenerator.tokenList">
            <summary>
            Se inicializa la lista tokenList.
            </summary>
            <typeparam name="int"></typeparam>
            <returns>La lista inicializada.</returns>
        </member>
        <member name="M:Bot.TokenGenerator.GenerateToken">
            <summary>
            Metodo para generar el token. verifica si existe en la lista, si existe, intenta genera uno nuevo si no existe lo agrega en la lista de globalRatings 
            </summary>
            <returns>El token generado.</returns>
        </member>
        <member name="T:Bot.UserInfo">
            <summary>
            Clase encargada de representar al usuario (componiendo name, id y role). Esta cumple con el patron SRP y Expert.
            </summary>
        </member>
        <member name="M:Bot.UserInfo.#ctor(System.String,System.Int64,Bot.IRole)">
            <summary>
            Método constructor de la clase User que se encarga de asignar los atributos
            name, id y role que usará la clase.
            </summary>
            <param name="name">El nombre del usuario.</param>
            <param name="id">El id del usuario.</param>
            <param name="role">El role del usuario</param>
        </member>
    </members>
</doc>
