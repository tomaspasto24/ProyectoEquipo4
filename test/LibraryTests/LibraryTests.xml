<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryTests</name>
    </assembly>
    <members>
        <member name="T:BotTests.AdminHandlerTest">
            <summary>
            Clase AdminHandlerTest la cual se encarga de testear las funcionalidades de la clase AdminHandler, se declaran las variables globales que se van a utilizar.
            </summary>
        </member>
        <member name="M:BotTests.AdminHandlerTest.Setup">
            <summary>
            Se inicializan las variables que se van a utilizar en los test.
            </summary>
        </member>
        <member name="M:BotTests.AdminHandlerTest.AdminHandlerAdminTest">
            <summary>
            Test que se encarga de testear el AdminHandler y verificar que se le asigne los permisos de admin al usuario al mandar el comando /admin
            </summary>
        </member>
        <member name="M:BotTests.AdminHandlerTest.AdminHandlerWrongCommandTest">
            <summary>
            Test que se encarga de verificar que el AdminHandler devuelva false (null), y un string vacio al momento de enviar un comando incorrecto.
            </summary>
        </member>
        <member name="M:BotTests.CancelHandlerTest.CancelHandlerMessageTest">
            <summary>
            Test que verifica el funcionamiento del handler al enviar el comando "/cancelar".
            </summary>
        </member>
        <member name="M:BotTests.CancelHandlerTest.CancelHandlerWrongTextTest">
            <summary>
            Test que verifica el funcionamiento del handler al enviar un comando incorrecto.
            </summary>
        </member>
        <member name="T:BotTests.CommandHandlerTest">
            <summary>
            Clase para testear el CommandHandler.
            </summary>
        </member>
        <member name="M:BotTests.CommandHandlerTest.SetUp">
            <summary>
            Metodo SetUp de los tests en el cual inicializo las variables que voy a utilizar.
            </summary>
        </member>
        <member name="M:BotTests.CommandHandlerTest.TestAdminCommandHandler">
            <summary>
            Test para probar los comandos que tiene un admin.
            </summary>
        </member>
        <member name="M:BotTests.CommandHandlerTest.TestUserCompanyCommandHandler">
            <summary>
            Test para probar los comandos que tiene un this.UserCompany.
            </summary>
        </member>
        <member name="M:BotTests.CommandHandlerTest.TestEntrepreneurCommandHandler">
            <summary>
            Test para probar los comandos que tiene un Emprendedor.
            </summary>
        </member>
        <member name="M:BotTests.CommandHandlerTest.TestDefaultCommandHandler">
            <summary>
            Test para probar los comandos que tiene un usuario Default.
            </summary>
        </member>
<<<<<<< HEAD
        <member name="T:BotTests.DefaultHandlerTest">
            <summary>
            clase DefaultHandlerTest la cual se encarga de testear las funcionalidades del handler DefaultHandler
            </summary>
        </member>
        <member name="M:BotTests.DefaultHandlerTest.Setup">
            <summary>
            Se inicializan las variables que se van a utilizar en los test.
            </summary>
        </member>
        <member name="M:BotTests.DefaultHandlerTest.DefaultHandlerSlashTest">
            <summary>
            Test que se encarga de verificar la respuesta del handler al enviar el comando "/Command".
            </summary>
        </member>
        <member name="M:BotTests.DefaultHandlerTest.DefaultHandlerWithOutSlashTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al enviar un comando incorrecto.
            </summary>
        </member>
        <member name="T:BotTests.DefaultRoleHandlerTest">
            <summary>
            Clase DefaultRoleHandlerTest que se encarga de testear las funcionalidades del handler DefaultRoleHandler.
            </summary>
        </member>
        <member name="M:BotTests.DefaultRoleHandlerTest.Setup">
            <summary>
            Se inicializan las variables que se usan en los test.
            </summary>
        </member>
        <member name="M:BotTests.DefaultRoleHandlerTest.DefaultRoleHandlerDefaultTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al enviar el comando "/default".
            </summary>
        </member>
        <member name="M:BotTests.DefaultRoleHandlerTest.DefaultRoleHandlerWrongCommandTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al enviar un comando incorrecto.
            </summary>
        </member>
=======
>>>>>>> master
        <member name="T:BotTests.RoleEntrepreneurTests">
            <summary>
            Tests de los métodos de la clase RoleEntrepreneur.
            </summary>
        </member>
        <member name="M:BotTests.RoleEntrepreneurTests.Setup">
            <summary>
            Se crea una instancia de emprendedor que será usada para los tests de cada método.
            </summary>
        </member>
        <member name="M:BotTests.RoleEntrepreneurTests.AddCertificationTest">
            <summary>
            Test del método que le agrega una certificación al emprendedor.
            </summary>
        </member>
        <member name="M:BotTests.RoleEntrepreneurTests.AddSpecializationTest">
            <summary>
            Test del método que le agrega una especialización al emprendedor.
            </summary>
        </member>
        <member name="M:BotTests.RoleEntrepreneurTests.AddListHistorialPublicationsTest1">
            <summary>
            Test del método que guarda las publicaciónes adquiridas por el emprendedor, se le agrega la publicación 
            y se fija que la lista no esté vacía.
            </summary>
        </member>
        <member name="M:BotTests.RoleEntrepreneurTests.ContactCompanyTest">
            <summary>
            Verifica que la ubicación que se le devuelve al emprendedor sea la correcta.
            </summary>
        </member>
        <member name="T:BotTests.GeoLocationTests">
            <summary>
            GeoLocationTests se encarga de testear los atributos y las funcionalidades de la clase
            GeoLocation.
            </summary>
        </member>
        <member name="M:BotTests.GeoLocationTests.SetUp">
            <summary>
            Este método se encarga de inicializar los atributos address, city y departament.
            Además de construir el objeto a testear location.
            </summary>
        </member>
        <member name="M:BotTests.GeoLocationTests.TestLocationInstance">
            <summary>
            Test que se encarga de comprobar la instancia de la clase GeoLocation.
            </summary>
        </member>
        <member name="M:BotTests.GeoLocationTests.TestDuration">
            <summary>
            Test que se encarga de testear el calculo de duración que realiza 
            el método CalculateDuration de la clase GeoLocation.
            </summary>
        </member>
        <member name="M:BotTests.GeoLocationTests.TestDistance">
            <summary>
            Test que se encarga de testear el calculo de distancia que realiza 
            el método CalculateDistance de la clase GeoLocation.
            </summary>        
        </member>
        <member name="T:BotTests.MaterialTests">
            <summary>
            Test de la clase Material que se encarga de testear todas las funcionalidades
            y opciones que otorga la clase a los demás objetos.
            </summary>
        </member>
        <member name="M:BotTests.MaterialTests.CreateSimpleMaterial">
            <summary>
            Test que se encarga de comprobar los atributos
            básicos de la clase Material mediante la creación de un simple Material.
            </summary>
        </member>
        <member name="M:BotTests.MaterialTests.KeyWordsTest">
            <summary>
            Test que se encarga de testear la funcionalidad de obtener, agregar y quitar 
            palabras clave anidadas a la clase Material.
            </summary>
        </member>
        <member name="T:BotTests.ModifyEntrepreneurInformationHandlerTest">
            <summary>
            Clase ModifyEntrepreneurInformationHandlerTest la cual se encarga de testear las funcionalidades de la clase ModifyEntrepreneurInformationHandlder, se declaran las variables globales que se van a utilizar.
            </summary>
        </member>
        <member name="M:BotTests.ModifyEntrepreneurInformationHandlerTest.Setup">
            <summary>
            Se inicializan las variables que se van a utilizar en los test.
            </summary>
        </member>
        <member name="M:BotTests.ModifyEntrepreneurInformationHandlerTest.ModifyEntrepreneurInformationHandlderNoHasPermissionTest">
            <summary>
            Test que se encarga de verificar la clase ModifyEntrepreneurInformationHandlder en caso de no tener el permiso necesario.
            </summary>
        </member>
        <member name="M:BotTests.ModifyEntrepreneurInformationHandlerTest.ModifyEntrepreneurInformationHandlderStartPermissionTest">
            <summary>
            Test que se encarga de verificar la clase ModifyEntrepreneurInformationHandlder al enviar el comando "/modificardatos".
            </summary>
        </member>
        <member name="M:BotTests.ModifyEntrepreneurInformationHandlerTest.ModifyEntrepreneurInformationHandlderChangeTest">
            <summary>
            Test que encarga de verificar la clase ModifyEntrepreneurInformationHandler en caso de enviarle el comando "1".
            </summary>
        </member>
        <member name="M:BotTests.ModifyEntrepreneurInformationHandlerTest.ModifyEntrepreneurInformationHandlderChangeHeaderTest">
            <summary>
            Test que encarga de verificar la clase ModifyEntrepreneurInformationHandler en caso de enviar el comando "2".
            </summary>
        </member>
        <member name="M:BotTests.ModifyEntrepreneurInformationHandlerTest.ModifyEntrepreneurInformationHandlderChangeSpecializationTest">
            <summary>
            Test que encarga de verificar la clase ModifyEntrepreneurInformationHandler en caso de enviar el comando "23.
            </summary>
        </member>
        <member name="M:BotTests.ModifyEntrepreneurInformationHandlerTest.ModifyEntrepreneurInformationHandlderChangeCertificationTest">
            <summary>
            Test que encarga de verificar la clase ModifyEntrepreneurInformationHandler en caso de enviar el comando "4".
            </summary>
        </member>
        <member name="M:BotTests.ModifyEntrepreneurInformationHandlerTest.ModifyEntrepreneurInformationHandlderWrongCommandTest">
            <summary>
            Test que encarga de verificar la clase ModifyEntrepreneurInformationHandler en caso de enviar un comando incorrecto.
            </summary>
        </member>
        <member name="T:BotTests.ModifyUserCertificationsHandlerTest">
            <summary>
            Clase ModifyUserCertificationsHandlerTest que se encarga de testear todas las funcionalidades del handler "ModifyUserCertificationsHandlerTest".
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserCertificationsHandlerTest.Setup">
            <summary>
            Se inicializan las variables que se van a utilizar en los test.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserCertificationsHandlerTest.ModifyUserAddNewCertificationHanlderTest">
            <summary>
            Test que se encarga de verificar ModifyUseraddCertificationHanlder en caso de enviar el comando "1".
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserCertificationsHandlerTest.ModifyUserdelateCertificationHanlderTest">
            <summary>
            Test que se encarga de verificar el ModifyUseraddCertificationHanlder en caso que se le ingrese el comando "2".
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserCertificationsHandlerTest.ModifyUserCertificationWrongTextHanlderTest">
            <summary>
            Test que se encarga de verificar el ModifyUseraddCertificationHanlder en caso que se le ingrese un comando incorrecto.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserCertificationsHandlerTest.ModifyUserHasCertificationHanlderTest">
            <summary>
            Test que se encarga de verificar el ModifyUseraddCertificationHanlder en caso que se le ingrese una certificación ya agregada anteriormente.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserCertificationsHandlerTest.ModifyUserAddCertificationHanlderTest">
            <summary>
            Test que se encarga de verificar el ModifyUseraddCertificationHanlder en caso que se le ingrese una nueva certificación.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserCertificationsHandlerTest.ModifyUserDelateCertificationHanlderTest">
            <summary>
            Test que se encarga de verificar el ModifyUseraddCertificationHanlder en caso que se le ingrese una certificación para eliminarla ya agregada anteriormente.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserCertificationsHandlerTest.ModifyUserNoFindCertificationHanlderTest">
            <summary>
            Test que se encarga de verificar el ModifyUseraddCertificationHanlder en caso que se le ingrese una certificación que no existe para eliminarla.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserCertificationsHandlerTest.ModifyUserCertificationEmptyTextHanlderTest">
            <summary>
            Test que se encarga de verificar el ModifyUseraddCertificationHanlder en caso que se le ingrese una string vacía.
            </summary>
        </member>
        <member name="T:BotTests.ModifyUserHeaderHanlderTest">
            <summary>
            Clase ModifyUserHeaderHanlderTest se encarga de testear las funcionalidades de la clase ModifyUserHeaderHanlder.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserHeaderHanlderTest.Setup">
            <summary>
            Se inicializan todas las  variables que se van a utilizar en los test.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserHeaderHanlderTest.ModifyUseraddCertificationHanlderTest">
            <summary>
            Test que se encarga de verificar la funcionalidad de actualizar la certificacion del emprendedor.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserHeaderHanlderTest.ModifyUserCertificationEmptyTextHanlderTest">
            <summary>
            Test que se encarga de verificar el handler en caso que se le envíe un string vacío.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserSpecializationsHandlerTest.Setup">
            <summary>
            Se inicializan las variables que se van a utilizar en los tests.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserSpecializationsHandlerTest.ModifyEntrepreneurInformationHandldlerAddSpecializationTest">
            <summary>
            Test que se encarga de verificar la funcionalidad del handler en caso que se le quiera añadir una "specialization".
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserSpecializationsHandlerTest.ModifyEntrepreneurInformationHandldlerDelateSpecializationTest">
            <summary>
            Test que se encarga de verificar el handler en caso que se quiera borrar una "specialization".
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserSpecializationsHandlerTest.ModifyEntrepreneurInformationHandldlerWrongCommandTest">
            <summary>
            Test que se encarga de verificar el handler en caso que se ingrese un comando incorrecto.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserSpecializationsHandlerTest.ModifyEntrepreneurInformationHandldlerAlreadyAddSpecializationTest">
            <summary>
            Test que verifica si la "specialization" ya fue agregada anteriormente.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserSpecializationsHandlerTest.ModifyEntrepreneurInformationHandldleraddSpecializationTest">
            <summary>
            Test que se encarga de verificar sel handler en caso de agregar la "specialization"
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserSpecializationsHandlerTest.ModifyEntrepreneurInformationHandldlerdelateSpecializationTest">
            <summary>
            Test que se encarga de verificar si se elimina la "Specialization" correctamente.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserSpecializationsHandlerTest.ModifyEntrepreneurInformationHandldlerWrongSpecializationTest">
            <summary>
            Test que se encarga de verificar 
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserSpecializationsHandlerTest.ModifyEntrepreneurInformationHandldlerEmptyTextTest">
            <summary>
            Test que se encarga de verificar la respuesta del handler en caso que se le ingrese un string vacio a la hora de modificar la "Specialization".
            </summary>
        </member>
        <member name="T:BotTests.ModifyUserUbicationHanlderTest">
            <summary>
            Clase ModifyUserUbicationHanlderTest que se encarga de testear las funcionalidades del handler ModifyUserUbicationHanlder.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserUbicationHanlderTest.Setup">
            <summary>
            Se inicializan las variables que se van a utilizar en los test.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserUbicationHanlderTest.ModifyUserChangeCityHanlderTest">
            <summary>
            Test que verifica el comportamiento del handler al intentar cambiar la ciudad en la que vive el "entrepreneur".
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserUbicationHanlderTest.ModifyUserChangeAdressHanlderTest">
            <summary>
            Test que verifica el comportamiento del handler al intentar cambiar la dirección en la que vive el "entrepreneur".
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserUbicationHanlderTest.ModifyUserCorrectChangeAdressHanlderTest">
            <summary>
            Test que verifica el comportamiento del handler al cambiar la ciudad en la que vive el "entrepreneur".
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserUbicationHanlderTest.ModifyUserCorrectChangeCityHanlderTest">
            <summary>
            Test que verifica el comportamiento del handler al cambiar la ciudad en la que vive el "entrepreneur".
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserUbicationHanlderTest.ModifyUserChangeWrongTextHanlderTest">
            <summary>
            Test que verifica el comportamiento del handler al ingresar un comando incorrecto.
            </summary>
        </member>
        <member name="M:BotTests.ModifyUserUbicationHanlderTest.ModifyUserChangeEmptyTextHanlderTest">
            <summary>
            Test que verifica el comportamiento del handler al ingresar una string vacía"
            </summary>
        </member>
        <member name="T:BotTests.PublicationSetTest">
            <summary>
            Clase para testear la clase PublicationSet.
            </summary>
        </member>
        <member name="M:BotTests.PublicationSetTest.SetUp">
            <summary>
            SetUp, asigna valores a las variables companyTest, initialMaterial, publicationTest1., publicationTest2, publicationTest3.
            </summary>
        </member>
        <member name="M:BotTests.PublicationSetTest.AddPublicationTest">
            <summary>
            Test que se encarga de testear el funcionamiento de la clase PublicationSet de agregar
            clases Publicación al sistema.
            </summary>
        </member>
        <member name="M:BotTests.PublicationSetTest.ContainsPublicationInListCompaniesTest">
            <summary>
            Test que se encarga de comprobar que el funcionamiento de ContainsPublicationInListPublications sea el 
            correcto y que se puedan identificar las pbulicaciones contenidas.
            </summary>
        </member>
        <member name="M:BotTests.PublicationSetTest.DeletePublicationTest">
            <summary>
            Test que se encarga de testear el funcionamiento de la clase PublicationSet de eliminar 
            clases Publicación del sistema.
            </summary>
        </member>
        <member name="M:BotTests.PublicationSetTest.ReturnListElementsTest">
            <summary>
            ReturnListElementsTest testea que el string de la lista de Publicaciones funcione bien.
            </summary>
        </member>
        <member name="M:BotTests.PublicationSetTest.ContainsCompanyInListPublicationsTest">
            <summary>
            ContainsPublicationInListCompaniesTest comprueba que el funcionamiento de encontrar
            si las clases Publicación se encuentran en el sistema con la condición del nombre de la Publicación.
            </summary>
        </member>
        <member name="T:BotTests.PublishHandlerTest">
            <summary>
            Clase PublishHandlerTest que se encarga de testear las funcionalidades de PublishHandler.
            </summary>
        </member>
        <member name="M:BotTests.PublishHandlerTest.Setup">
            <summary>
            Se declaran las variables que se van a utilizar en los test
            </summary>
        </member>
        <member name="M:BotTests.PublishHandlerTest.PublishHandlerNoHasPermissionTest">
            <summary>
            test que se encarga de verificar el comportamiento del hanlder al enviar el comando "/publicar" y no tener el permiso.
            </summary>
        </member>
        <member name="M:BotTests.PublishHandlerTest.PublishHandlerHasPermissionTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al enviar el comando "/publicar" y tener el permiso.
            </summary>
        </member>
        <member name="M:BotTests.PublishHandlerTest.PublishHandlerPublicationNameTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al ingresar el nombre de la publicación".
            </summary>
        </member>
        <member name="T:BotTests.RegisterCompanyUserHandlerTest">
            <summary>
            Clase para testear el RegisterCompanyUserHandler.
            </summary>
        </member>
        <member name="M:BotTests.RegisterCompanyUserHandlerTest.SetUp">
            <summary>
            Metodo SetUp para los tests
            </summary>
        </member>
        <member name="M:BotTests.RegisterCompanyUserHandlerTest.TestRegisterHandled">
            <summary>
            Test para probar que el RegisterHandler actua
            </summary>
        </member>
        <member name="M:BotTests.RegisterCompanyUserHandlerTest.TestNoTokenFound">
            <summary>
            Test para probar que pasa cuando no se encuentra un token
            </summary>
        </member>
        <member name="M:BotTests.RegisterCompanyUserHandlerTest.TestTokenFound">
            <summary>
            Test para probar que pasa cuando se encuentra un token
            </summary>
        </member>
        <member name="M:BotTests.RegisterCompanyUserHandlerTest.TestCancel">
            <summary>
            Test para probar el Cancel del handler
            </summary>
        </member>
        <member name="M:BotTests.RegisterHandlerTest.SetUp">
            <summary>
            Se setea el sessionRelated.Instance en null para que no queden todas las variables anteriores cargadas en el mismo debido a que este es un singleton.
            </summary>
        </member>
        <member name="M:BotTests.RegisterHandlerTest.RegisterHandlerNoPermissionTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al no tener el permiso necesario.
            </summary>
        </member>
        <member name="M:BotTests.RegisterHandlerTest.RegisterHandlerHasPermissionTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al intentar registrarse y tener el permiso necesario.
            </summary>
        </member>
        <member name="M:BotTests.RegisterHandlerTest.RegisterHandlerConfirmTokenTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler  al validar el token.
            </summary>
        </member>
        <member name="M:BotTests.RegisterHandlerTest.RegisterHandlerTokenNoFndTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al no encontrar el token.
            </summary>
        </member>
        <member name="M:BotTests.RegisterHandlerTest.RegisterHandlerWrongTextTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al ingresar un comando incorrecto.
            </summary>
        </member>
        <member name="T:BotTests.ReportTest">
            <summary>
            Clase ReportTest la cual se encarga de testear las funcionalidades de la clase EntrepreneurReport y CompanyReport.
            </summary>
        </member>
        <member name="M:BotTests.ReportTest.Setup">
            <summary>
            Método que crea y asgina las instancias a los atributos que seran utilizados para ejecutar los test.
            </summary>
        </member>
        <member name="M:BotTests.ReportTest.CompanyReportClosedpublicationTest">
            <summary>
            Test de reporte empresa cuando la publicacion esta cerrada.
            </summary>
        </member>
        <member name="M:BotTests.ReportTest.CompanyReportPublicationNotClosedTest">
            <summary>
            Test de reporte empresa cuando la publicacion no esta cerrada.
            </summary>
        </member>
        <member name="M:BotTests.ReportTest.EntrepreneurReportClosedPublicationTest">
            <summary>
            Test del reporte emprendedor cuando la publicacion esta cerrada.
            </summary>
        </member>
        <member name="M:BotTests.ReportTest.EntrepreneurReportPublicationNotClosedTest">
            <summary>
            Test del reporte emprendedor en caso de que la publicacion no este cerrada.
            </summary>
        </member>
        <member name="T:BotTests.SalesReportHandlerTest">
            <summary>
            Clase SalesReportHandlerTest que se encarga de testear el comportamiento del hanlder.
            </summary>
        </member>
        <member name="M:BotTests.SalesReportHandlerTest.SalesReportHandlerNoHasPermissionTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al enviar un mensaje y no tener el permiso necesario.
            </summary>
        </member>
        <member name="M:BotTests.SalesReportHandlerTest.SalesReportHandlerHasPermissionTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al enviar el comando "/reporte".
            </summary>
        </member>
        <member name="T:BotTests.SearchHandlerTest">
            <summary>
            Clase SearchHandlerTest la cual se encarga de testear las funcionalidades de la clase SearchHandler, se declaran las variables globales que se van a utilizar.
            </summary>
        </member>
        <member name="M:BotTests.SearchHandlerTest.SearchHandlerNoHasPermissionTest">
            <summary>
            Test que se encarga de verificar si devuelve false en caso de un usario no tener el permiso de "Search". 
            </summary>
        </member>
        <member name="M:BotTests.SearchHandlerTest.SearchHandlerCommandTest">
            <summary>
            Test que se encarga de verificar si el handler responde correctamente al comando enviádo.
            </summary>
        </member>
        <member name="M:BotTests.SearchHandlerTest.SearchHandlerWrongCommandTest">
            <summary>
            Test que se encarga de verificar si retorna falso en caso de que se envíe un comando incorrecto.
            </summary>
        </member>
        <member name="T:BotTests.StartHandlerTest">
            <summary>
            Clase TokenHandlerTest la cual se encarga de testear las funcionalidades de la clase tokenHandler, se declaran las variables globales que se van a utilizar.
            </summary>
        </member>
        <member name="M:BotTests.StartHandlerTest.Setup">
            <summary>
            Se inicializan las variables.
            </summary>
        </member>
        <member name="M:BotTests.StartHandlerTest.StartHandlerHelloTest">
            <summary>
            Se testea que el StartHandler responda al comando /hola.
            </summary>
        </member>
        <member name="M:BotTests.StartHandlerTest.StartHandlerWrongTextTest">
            <summary>
            Se testea que el StartHandler no envie el mensaje dado en caso de que el comando que se ingresa sea diferente al esperado.
            </summary>
        </member>
        <member name="T:BotTests.TextNullHandlerTest">
            <summary>
            Clase TextNullHandlerTest la cual se encarga de testear las funcionalidades de la clase TextNullHandler, se declaran las variables globales que se van a utilizar.
            </summary>
        </member>
        <member name="M:BotTests.TextNullHandlerTest.TextNullHandlerTest1">
            <summary>
            Test que se encarga de verificar la respuesta del handler en caso de que el mensaje que se ingrea sea null. 
            </summary>
        </member>
        <member name="M:BotTests.TextNullHandlerTest.TextNoNullHandlerTest">
            <summary>
            Test que se encarga de verificar si el handler convierte el string ingresado en el formato deseadocy no sea null.
            </summary>
        </member>
        <member name="T:BotTests.TokenHandlerTest">
            <summary>
            Clase TokenHandlerTest la cual se encarga de testear las funcionalidades de la clase tokenHandler, se declaran las variables globales que se van a utilizar.
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.Setup">
            <summary>
            Se inicializan las variables que se van a usar en los test. 
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandleNoPermissionTokenTest">
            <summary>
            Test que se encarga de verificar que el handler retorne "false" en caso de intentar generar el token y no tener el permiso "GenerateToken".
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandlePermissionTokenTest">
            <summary>
            Test que se encarga de verificar que el handler devuelva True en caso de que se intente generar el token y se tenga el permiso necesario.
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandleInvitationTest">
            <summary>
            Test que se encarga de verificar que el handler responda correctamente y devuelva true en cas de enviar el comando "/crearinvitacion"
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandleNoCompanyTest">
            <summary>
            Se testea que se le pase una compañia ya registrada y debe devolver el mensaje correspondiente.
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandleCompanyTest">
            <summary>
            Se testea que asigne el nombre de la compañia que se le pasa.
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandleCompanyHeadingTest">
            <summary>
            Se testea que se asigne correctamente el rubro de la empresa.
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandleCompanyCityTest">
            <summary>
            Se testea que se le asigne correctamente la ciudad donde está ubicada la empresa.
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandleCompanyAddressTest">
            <summary>
            Se testea que se le asigne correctamente la direccion de la empresa.
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandleEmptyCompanyAddressTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler al recibir un string vacío.
            </summary>
        </member>
        <member name="M:BotTests.TokenHandlerTest.TokenHandleCompanyContactTest">
            <summary>
            Se testea que se le asigne el contacto de la empresa y para llegar a este punto debe pasar por las condiciones anteriores.
            </summary>
        </member>
        <member name="T:BotTests.TokenTest">
            <summary>
            Clase TokenTest, esta se va a encargar de testear las funciones de generar el token el cual estara compuesto por una string alfanumerica.
            </summary>
        </member>
        <member name="F:BotTests.TokenTest.user1">
            <summary>
            Defino la variable afuera para que sea global y adentro del metodo la instancio.
            </summary>
        </member>
        <member name="M:BotTests.TokenTest.Setup">
            <summary>
            Método que crea y asgina las instancias a los atributos que seran utilizados en los test.
            </summary>
        </member>
        <member name="M:BotTests.TokenTest.TokenType">
            <summary>
            Test del token para ver si lo que retorna es de tipo int.
            </summary>
        </member>
        <member name="T:BotTests.UnderTakeHanlderTest">
            <summary>
            Clase UnderTakeHanlderTest que se encarga de verificar las funcionalidades del handler UnderTakeHanlder
            </summary>
        </member>
        <member name="M:BotTests.UnderTakeHanlderTest.Setup">
            <summary>
            Se inicializan las variables que se van a usar en los test.
            </summary>
        </member>
        <member name="M:BotTests.UnderTakeHanlderTest.UnderTakeHandlerNoPermissionTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler en caso que el usuario no tenga el permiso.
            </summary>
        </member>
        <member name="M:BotTests.UnderTakeHanlderTest.UnderTakeHandlerHasPermissionTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler en caso que el usuario tenga el permiso.
            </summary>
        </member>
        <member name="M:BotTests.UnderTakeHanlderTest.UnderTakeHandlerConfimingHeadingTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler en caso de intentar registrar un rubro.
            </summary>
        </member>
        <member name="M:BotTests.UnderTakeHanlderTest.UnderTakeHandlerConfirmingCityTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler en caso de intentar registrar la ciudad.
            </summary>
        </member>
        <member name="M:BotTests.UnderTakeHanlderTest.UnderTakeHandlerConfirmingAdressTest">
            <summary>
            Test que se encarga de verificar el comportamiento del handler en caso de intentar verificar la direccion.
            </summary>
        </member>
        <member name="T:BotTests.UserInformationHandlerTest">
            <summary>
            Clase UserInformationHandlerTest la cual se encarga de testear las funcionalidades de la clase UserInformationHandler, se declaran las variables globales que se van a utilizar.
            </summary>
        </member>
        <member name="M:BotTests.UserInformationHandlerTest.UserNoPermissionInformationHandlerTest">
            <summary>
            Test que se encarga de verificar el comportamiento del hanlder al momento de un usuario enviar un mensaje y no tener el permiso necesario.
            </summary>
        </member>
        <member name="M:BotTests.UserInformationHandlerTest.UserHasPermissionInformationHandlerTest">
            <summary>
            Test que se encarga de verificar el comportamiento del hanlder en caso de un usuario enviar el comando "/datos".
            </summary>
        </member>
        <member name="M:BotTests.UserInformationHandlerTest.UserInformationHandlerWrongMessageTest">
            <summary>
            Test que se encarga de verificar el comportamiento del hanlder en caso que se le envie un mensaje incorrecto.
            </summary>
        </member>
    </members>
</doc>
